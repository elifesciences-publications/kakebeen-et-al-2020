geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter()
ggplot(test, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter() +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
### vln plot of meis1 and pbx3 from all
test <- FetchData(pax.all, c("ident", "Laevis", "mock_24", "pbx3", "meis1"))
### vln plot of meis1 and pbx3 from all
test <- FetchData(pax.all, c("ident", "AK_Names", "pbx3", "meis1"))
### vln plot of meis1 and pbx3 from all
test <- FetchData(pax.all, c("ident", "AK_Names","CellClass", "pbx3", "meis1"))
ggplot(test, aes(x=Laevis, y=pbx3, fill=CellClass)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
### vln plot of meis1 and pbx3 from all
test <- FetchData(subset(pax.all, condition %in% c("uninj", "dmso")), c("ident", "AK_Names","CellClass", "condition", "pbx3", "meis1"))
ggplot(test, aes(x=Laevis, y=pbx3, fill=condition)) +
geom_split_violin(aes(mapping = 'condition')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=AK_Names, y=pbx3, fill=condition)) +
geom_split_violin(aes(mapping = 'condition')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=AK_Names, y=pbx3, fill=condition)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=AK_Names, y=pbx3, fill=AK_Names)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=AK_Names, y=mesi1, fill=AK_Names)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=CellClass, y=mesi1, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=CellClass, y=meis1, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(test, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
### vln plot of meis1 and pbx3 from all
all.expression <- FetchData(subset(pax.all, condition %in% c("uninj", "dmso")), c("ident", "AK_Names","CellClass", "condition", "pbx3", "meis1"))
### vln plot of meis1 and pbx3 from all
all.expression <- FetchData(pax.all, c("ident", "AK_Names","CellClass", "condition", "pbx3", "meis1"))
ggplot(all.expression, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
# Set colors
my.color.neural <-unique( c(lacroix_palette("Berry"), lacroix_palette("CranRaspberry"), lacroix_palette("Tangerine"),        lacroix_palette("PinaFraise")))
ggplot(all.expression, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw() +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)])
ggplot(all.expression, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)])
Seurat:::RotatedAxis() +
theme(legend.position = "none")
Seurat:::RotatedAxis() +
theme(legend.position = "none")
ggplot(all.expression, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)]) +
Seurat:::RotatedAxis() +
theme(legend.position = "none")
pp <- ggplot(all.expression, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)]) +
Seurat:::RotatedAxis() +
theme(legend.position = "none")
pm <- ggplot(all.expression, aes(x=CellClass, y=meis1, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)]) +
Seurat:::RotatedAxis() +
theme(legend.position = "none") +
xlab("")
pp <- ggplot(all.expression, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)]) +
Seurat:::RotatedAxis() +
theme(legend.position = "none") +
xlab("")
plot_grid(pp, pm, nrow = 1)
plot_grid(pm, pp, nrow = 1)
Idents(pax.neural) <- pax.neural$Laevis
neuralgenes <- c("mbp", "lepr", "lep", "foxa1", "foxa2", "tph1", "th", "gata3", "gata2", "tubb3", "mmp17", "mmp15", "tlx3", "tlx1", "pou4f1", "vsx2", "chat", "isl1", "mnx1", "lhx1", "pax2", "evx2", "evx1", "neurod4", "neurod1", "ascl1", "olig2", "dbx1", "irx3", "nkx6-1", "pax6", "nkx6-2", "arx")
DefaultAssay(pax.neural) <- "RNA"
DotPlot(pax.neural, features=neuralgenes, cols = c("blue", "gold")) + RotatedAxis() + NoLegend()
DotPlot(pax.neural, features=neuralgenes, cols = c("blue", "gold")) + RotatedAxis()
p1 <- FeaturePlot(pax.all, features = c("sox2",  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p1
p1 <- FeaturePlot(pax.all, features = c("sox2",  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p1 <- FeaturePlot(pax.all, features = c("sox2",  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p1 <- FeaturePlot(pax.all, features = c("sox2",  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen")))+ NoAxes()+NoLegend()
p1 <- FeaturePlot(pax.all, features = c("sox2",  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p1 <- FeaturePlot(pax.all, features = c("sox2",  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen")))+ NoAxes()+NoLegend()
p1 <- FeaturePlot(pax.all, features = c("sox2",  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen")))+ NoAxes()+NoLegend()
p1 <- FeaturePlot(pax.all, features = c("sox2",  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen")))+ NoAxes()+NoLegend()
p1 <- FeaturePlot(pax.all, features = c("sox2"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p1
p2 <- FeaturePlot(pax.all, features = c("neurog1"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p1 <- FeaturePlot(pax.all, features = c("sox2"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p2 <- FeaturePlot(pax.all, features = c("neurog1"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p3 <- FeaturePlot(pax.all, features = c("neurod1"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p4 <- FeaturePlot(pax.all, features = c("elavl4"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
plot_grid(p1, p2, p3, p4, nrow = 2)
p1 <- FeaturePlot(pax.neural, features = c("pbx3"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p2 <- FeaturePlot(pax.neural, features = c("meis1"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
plot_grid(p2, p1, nrow = 1)
p1 <- FeaturePlot(pax.all, features = c("pbx3"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
p2 <- FeaturePlot(pax.all, features = c("meis1"),  order = TRUE, cols = c("dodgerblue3", "yellow", "forestgreen"))+ NoAxes()+NoLegend()
plot_grid(p2, p1, nrow = 1)
plot_grid(p2, p1, nrow = 2)
pp <- ggplot(all.expression, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)]) +
Seurat:::RotatedAxis() +
theme(legend.position = "none") +
xlab("")
pm <- ggplot(all.expression, aes(x=CellClass, y=meis1, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)]) +
Seurat:::RotatedAxis() +
theme(legend.position = "none") +
xlab("")
plot_grid(pm, pp, nrow = 2)
pp <- ggplot(all.expression, aes(x=CellClass, y=pbx3, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)]) +
theme(legend.position = "none") +
xlab("")
pm <- ggplot(all.expression, aes(x=CellClass, y=meis1, fill=CellClass)) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
scale_fill_manual(values = my.color.neural[c(1, 3, 5, 7, 9, 11)]) +
theme(legend.position = "none") +
xlab("")
plot_grid(pm, pp, nrow = 2)
pp
pm
pp <- ggplot(all.expression, aes(x=CellClass, y=pbx3), fill=gold) +
geom_violin() +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
theme(legend.position = "none") +
xlab("")
pp
pp <- ggplot(all.expression, aes(x=CellClass, y=pbx3)) +
geom_violin(fill=gold) +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
theme(legend.position = "none") +
xlab("")
pp <- ggplot(all.expression, aes(x=CellClass, y=pbx3)) +
geom_violin(fill="gold") +
geom_jitter(size=0.1) +
theme_bw(base_size = 30) +
theme(legend.position = "none") +
xlab("")
vlndata <- FetchData(pax.neural, c("ident", "Laevis", "mock_24", "pbx3", "meis1"))
# plot out violin plots
ggplot(vlndata, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
# plot out violin plots
pp <- ggplot(vlndata, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
pm <- ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
Seurat:::RotatedAxis()
# plot out violin plots
pp <- ggplot(vlndata, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
scale_fill_manual(values =c("#e6550d", "#FBB58F") )+
Seurat:::RotatedAxis()
pp
pm <- ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
scale_fill_manual(values = c("#8856a7","#B574A7"))+
Seurat:::RotatedAxis()
pm <- ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
scale_fill_manual(values = c("#8856a7","#B574A7"))+
Seurat:::RotatedAxis()
pm
pm <- ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
scale_fill_manual(values = c("#c51b8a","#B574A7"))+
Seurat:::RotatedAxis()
plot_grid(pm, pp, nrow = 2)
# plot out violin plots
pp <- ggplot(vlndata, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
scale_fill_manual(values =c("#e6550d", "#FBB58F") )
pm <- ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw() +
scale_fill_manual(values = c("#c51b8a","#B574A7"))
plot_grid(pm, pp, nrow = 2)
# plot out violin plots
pp <- ggplot(vlndata, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values =c("#e6550d", "#FBB58F") )
# plot out violin plots
pp <- ggplot(vlndata, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values =c("#e6550d", "#FBB58F")) +
xlab("")
pm <- ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values = c("#c51b8a","#B574A7")) +
xlab("")
plot_grid(pm, pp, nrow = 2)
# plot out violin plots
pp <- ggplot(vlndata, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values =c("#e6550d", "#FBB58F")) +
xlab("") +
ylab("pbx3 expression")
pm <- ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values = c("#c51b8a","#B574A7")) +
xlab("")+
ylab("meis1 expression")
plot_grid(pm, pp, nrow = 2)
# plot out violin plots
pp <- ggplot(vlndata, aes(x=Laevis, y=pbx3, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values =c("#e6550d", "#FBB58F")) +
xlab("") +
ylab("pbx3 expression") +
theme(legend.position = "none")
pm <- ggplot(vlndata, aes(x=Laevis, y=meis1, fill=mock_24)) +
geom_split_violin(aes(mapping = 'mock_24')) +
geom_jitter(size=0.1) +
theme_bw(base_size = 20) +
scale_fill_manual(values = c("#c51b8a","#B574A7")) +
xlab("")+
ylab("meis1 expression")+
theme(legend.position = "none")
plot_grid(pm, pp, nrow = 2)
test <- pax.neural
select.cells <- c("CGATGTAAGAGATGAG_1", "CTGGTCTAGCGTTGCC_2", "AGGGAGTCATCACGAT_3", "CATGGCGCACTGTCGG_3", "CCCAATCGTGGTTTCA_3", "GGCTGGTAGTGTGAAT_3",
"TAAACCGCAGTTCATG_3", "TTCTACACAGGGATTG_3", "ACATACGGTTCATGGT_3")
remove <- select.cells
remove <- concat.grep(remove)
pax.neural[[]]
pax.neural[[grep(pax.neural$orig.ident, pattern = remove)]]
remove
pax.neural[[grep(pax.neural$orig.ident, pattern = remove, ignore.case = TRUE),]]
pax.neural[1,1]
pax.neural[[1,1]]
subset(pax.neural, orig.ident %in% select.cells)
pax.neural
HoverLocator(pax.neural)
test <- DimPlot(pax.neural)
HoverLocator(test)
HoverLocator(testplot)
HoverLocator(test)
pax.neural@meta.data[,1]
pax.neural$orig.ident
grep(pax.neural$orig.ident, pattern = remove)
grep(pax.neural$orig.ident, pattern = remove, ignore.case = TRUE)
grep(pax.neural$orig.ident, pattern = "CCCAATCGTGGTTTCA_3", ignore.case = TRUE)
pax.neural@meta.data[1,2]
pax.neural@meta.data[2,2]
pax.neural@meta.data[,5]
pax.neural@meta.data[,10]
colnames(pax.neural@meta.data[,10])
colnames(pax.neural@meta.data)
pax.neural@meta.data[,1]
pax.neural@meta.data[,2]
pax.neural@meta.data[,3]
pax.neural@meta.data[,4]
pax.neural@meta.data[,5]
pax.neural@meta.data[[]]
plot_grid(pm, pp, nrow = 2)
test <- SubsetData(ident.remove=select.cells)
test <- SubsetData(test, ident.remove=select.cells)
test <- pax.neural
test <- SubsetData(test, ident.remove=select.cells)
test <- subset(test, ident.remove=select.cells)
DimPlot(test)
test <- subset(test, orig.ident %in% select.cells, invert = TRUE )
DimPlot(test)
select.cells
test$orig.ident
class(test$orig.ident)
select.cells
test$orig.ident
test$Laevis\
test$Laevis
pax.neural@meta.data[[]]
pax.neural@meta.data
test$
test <- subset(test, rownames(test) %in% select.cells, invert = TRUE )
rownames(test)
test$
test <- subset(test, rownames(test@meta.data) %in% select.cells, invert = TRUE )
rownames(test@meta.data)
test$cellID <- rownames(test@meta.data)
test$
test <- subset(test, cellID %in% select.cells, invert = TRUE )
test$cellID
test@meta.data
colnames(test@meta.data)
grep(test@meta.data$cellID, pattern = remove, ignore.case = TRUE)
test <- test[-grep(test@meta.data$cellID, pattern = remove, ignore.case = TRUE), ]
nrow(test@meta.data)
nrow(pax.neural@meta.data)
grep(test@meta.data$cellID, pattern = remove, ignore.case = TRUE)
select.cells
test$cellID
test$
test <- subset(test, cellID %in% select.cells)
test$
test <- subset(test, cellID == select.cells[1], invert=TRUE)
remove2 <- grep(test@meta.data$cellID, pattern = remove, ignore.case = TRUE)
remove2
test <- test[-remove2, ]
test$
test <- subset(test@meta.data, cellID == select.cells[1], invert=TRUE)
remove2 <- grep(test@meta.data$cellID, pattern = remove, ignore.case = TRUE)
remove2
test <- test@meta.data[-remove2, ]
nrow(test@meta.data)
test <- pax.neural
remove2 <- grep(test@meta.data$cellID, pattern = remove, ignore.case = TRUE)
test@meta.data <- test@meta.data[-remove2, ]
nrow(test@meta.data)
-remove2
remove2
test
test@meta.data
test <- pax.neural
test$cellID <- rownames(test@meta.data)
remove2 <- grep(test@meta.data$cellID, pattern = remove, ignore.case = TRUE)
remove2
test@meta.data <- test@meta.data[-remove2, ]
nrow(test@meta.data)
DimPlot(test)
test <- pax.neural
test$
test <- subset(test, idents = select.cells, invert=TRUE)
test$cellID <- rownames(test@meta.data)
test$
Idents(test) <-  cellID
test$
Idents(test) <-  "cellID"
test
DimPlot(test)
test$
Idents(test) <-  test$cellID
Idents(test) <-  test$cellID
test <- subset(test, idents = select.cells, invert=TRUE)
DimPlot(test)
Idents(test) <-  test$Laevis
DimPlot(test)
## remove outlier cells
select.cells <- c("CGATGTAAGAGATGAG_1", "CTGGTCTAGCGTTGCC_2", "AGGGAGTCATCACGAT_3", "CATGGCGCACTGTCGG_3", "CCCAATCGTGGTTTCA_3", "GGCTGGTAGTGTGAAT_3",
"TAAACCGCAGTTCATG_3", "TTCTACACAGGGATTG_3", "ACATACGGTTCATGGT_3")
pax.neural$cellID <- rownames(pax.neural@meta.data)
Idents(pax.neural) <- cellID
Idents(pax.neural) <- "cellID"
Idents(pax.neural)
pax.neural <- subset(pax.neural, idents = select.cells, invert=TRUE)
# Check subset
Idents(pax.neural) <- "Laevis"
DimPlot(pax.neural)
# # Save out all cells
# saveRDS(pax.combined, "pax.combined_FINAL.RDS") # saved 3 Sept 2019
# # Save out all cells
saveRDS(pax.neural, "pax.neural_FINAL.RDS") # save 12 Aug 2019
# Write function to blend feature plot with sox2
sox2Blend <- function(gene){
FeaturePlot(pax.neural, blend = TRUE, features = c("sox2", gene), cols = c("#CC6600", "#009999"), order = TRUE, pt.size = 0.4)
}
p1 <- sox2Blend("elavl4") # neg control neuron
p1
# load packages
library(Seurat)
library(LaCroixColoR)
library(ggplot2)
library(cowplot)
library(tidyr)
library(DT)
library(dplyr)
# load functions
source("~/Desktop/pax6 paper/Final Markdowns/common_source_functions.R")
# Set colors
my.color.neural <-unique( c(lacroix_palette("Berry"), lacroix_palette("CranRaspberry"), lacroix_palette("Tangerine"),        lacroix_palette("PinaFraise")))
condition.color <- c( "#6F0909", "#C0C0C0")
cc_colors <- c((lacroix_palette("Lime"))[c(1,3)], "black")
# Set working directory
setwd("~/Desktop/pax6 paper/Final Markdowns/SingleCell/analysis/")
# Read in pax.all seurat object
pax.all <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.combined_FINAL.RDS")
# read in pax.neural
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
# Write function to blend feature plot with sox2
sox2Blend <- function(gene){
FeaturePlot(pax.neural, blend = TRUE, features = c("sox2", gene), cols = c("#CC6600", "#009999"), order = TRUE, pt.size = 0.4)
}
p1 <- sox2Blend("elavl4") # neg control neuron
p1
## This is where files will save ##
setwd("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/")
## remove outlier cells
select.cells <- c("CGATGTAAGAGATGAG_1", "CTGGTCTAGCGTTGCC_2", "AGGGAGTCATCACGAT_3", "CATGGCGCACTGTCGG_3", "CCCAATCGTGGTTTCA_3", "GGCTGGTAGTGTGAAT_3","TAAACCGCAGTTCATG_3", "TTCTACACAGGGATTG_3", "ACATACGGTTCATGGT_3") # define cells to remove, identified with hover feature
pax.neural$cellID <- rownames(pax.neural@meta.data) # make identity column of cell ids
Idents(pax.neural) <- "cellID" # set idents to cellID
pax.neural <- subset(pax.neural, idents = select.cells, invert=TRUE) # subset out all cells except for outliers
# Check subset
Idents(pax.neural) <- "Laevis" # return idents to laevis
DimPlot(pax.neural) # plot UMAP
getwd()
# # Save out all cells
# saveRDS(pax.combined, "pax.combined_FINAL.RDS") # saved 3 Sept 2019
# # Save out all cells
saveRDS(pax.neural, "pax.neural_FINAL.RDS") # save 12 Aug 2019
p1 <- sox2Blend("elavl4") # neg control neuron
p1
