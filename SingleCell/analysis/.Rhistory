datatable(revi_6hpa)
test <- merge.data.frame(Go_6hpa_use, revi_6hpa, by.x = "term_id", by.y = "term_ID")
datatable(test)
test <- merge.data.frame(Go_24hpa_use, revi_24hpa, by.x = "term_id", by.y = "term_ID")
datatable(test)
test <- merge.data.frame(Go_72hpa_use, revi_72hpa, by.x = "term_id", by.y = "term_ID")
datatable(test)
# load functions
source("~/Desktop/pax6 paper/Final Markdowns/common_source_functions.R")
# Set colors
my.color.neural <-unique( c(lacroix_palette("Berry"), lacroix_palette("CranRaspberry"), lacroix_palette("Tangerine"),        lacroix_palette("PinaFraise")))
condition.color <- c( "#6F0909", "#C0C0C0")
cc_colors <- c((lacroix_palette("Lime"))[c(1,3)], "black")
# Set working directory
setwd("~/Desktop/pax6 paper/Final Markdowns/SingleCell/analysis/")
# Read in pax.all seurat object
pax.all <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.combined_FINAL.RDS")
FindGene(pax.all, "vim|slc1a3|hes1|rc2|blbp")
FindGene(pax.all, "vim|slc1a3|hes1|rc2|fabpy7")
FindGene(pax.all, "vim|slc1a3|hes1|rc2|fabp7")
FindGene(pax.all, "vim|slc1a3|hes1|nes|fabp7")
glia <- FindGene(pax.all, "vim|slc1a3|hes1|nes|fabp7")
FeaturePlot(pax.all, features = glia)
DefaultAssay(pax.all) <- "RNA"
FeaturePlot(pax.all, features = glia)
# read in pax.neural
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
DefaultAssay(pax.neural) <- "RNA"
glia <- FindGene(pax.neural, "vim|slc1a3|hes1|nes|fabp7")
glia
FeaturePlot(pax.neural, features = glia)
FeaturePlot(pax.neural, features = c("vim", "nes", "hes1", "slc1a3", "fabp7"))
DimPlot(pax.neural, label = TRUE)
Idents(pax.neural) <- AK_Names
Idents(pax.neural) <- pax.neural$AK_Names
DimPlot(pax.neural, label = TRUE)
# subset nerual clusters
pax.nsc<- SubsetData(pax.combined, ident.use = c(NSC))
# subset nerual clusters
pax.nsc<- SubsetData(pax.neural, ident.use = c(NSC))
# subset nerual clusters
pax.nsc<- SubsetData(pax.neural, ident.use = c("NSC"))
# Run the standard workflow for visualization and clustering
pax.nsc <- ScaleData(object = pax.nsc, verbose = TRUE, features = rownames(pax.nsc))
pax.nsc <- RunPCA(object = pax.nsc, npcs = 30, verbose = TRUE) # verbose shows us how long its running
nrow(subset(pax.neural, condition =="uninj"))
nrow(subset(pax.neural, condition =="dmso"))
table(pax.neural$condition)
table(pax.all$condition)
# Run the standard workflow for visualization and clustering
pax.nsc <- ScaleData(object = pax.nsc, verbose = TRUE, features = rownames(pax.nsc))
# umap and Clustering
pax.neural <- RunUMAP(object = pax.neural, reduction = "pca", dims = 1:20) # reduce by pca to a umap reduction
ElbowPlot(pax.nsc, ndims = 30)
# umap and Clustering
pax.nsc <- RunUMAP(object = pax.nsc, reduction = "pca", dims = 1:20) # reduce by pca to a umap reduction
pax.nsc <- FindNeighbors(object = pax.nsc, reduction = "pca", dims = 1:20) # find nearesst neighbors
pax.nsc <- FindClusters(pax.nsc, resolution = 0.3) # get clusters ## resolution at 0.3 for 050719
DimPlot(pax.nsc)
pax.nsc <- FindClusters(pax.nsc, resolution = 0.5) # get clusters ## resolution at 0.3 for 050719
DimPlot(pax.nsc)
de.nsc.0 <- FindMarkers(pax.nsc, ident.1 = o)
de.nsc.0 <- FindMarkers(pax.nsc, ident.1 = 0)
de.nsc.1 <- FindMarkers(pax.nsc, ident.1 = 1)
de.nsc.2 <- FindMarkers(pax.nsc, ident.1 = 2)
de.nsc.3 <- FindMarkers(pax.nsc, ident.1 = 3)
de.nsc.4 <- FindMarkers(pax.nsc, ident.1 = 4)
datatable(de.nsc.0)
FeaturePlot(pax.nsc, features = rownames(de.nsc.0[1:5,]))
datatable(de.nsc.0=1)
datatable(de.nsc.1)
datatable(de.nsc.2)
datatable(de.nsc.3)
# load packages
library(ggplot2)
library(LaCroixColoR)
library(RColorBrewer)
library(cowplot)
library(DT)
library(dplyr)
library(gridExtra)
library(tidyverse)
library(ggplotify)
library(knitr)
library(treemap)
# source functions
source("~/Desktop/pax6 paper/Final Markdowns/common_source_functions.R")
# Set wd
setwd("~/Desktop/pax6 paper/Final Markdowns/GRN/")
# source functions
source("~/Desktop/pax6 paper/Final Markdowns/common_source_functions.R")
# Set wd
setwd("~/Desktop/pax6 paper/Final Markdowns/GRN/")
table.6 <- read.table("outs/table.6.txt", sep = "\t")
table.24 <- read.table("outs/table.24.txt", sep = "\t")
table.72 <- read.table("outs/table.72.txt", sep = "\t")
table.6.grn <- read.table("outs/table.6.grn.txt", sep = "\t")
table.24.grn <- read.table("outs/table.24.grn.txt", sep = "\t")
table.72.grn <- read.table("outs/table.72.grn.txt", sep = "\t")
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx <- filter(mastertable, TF == "pbx3" | Gene =="pbx3")
mastertable <- read.table("outs/atac_rna_motif.txt", sep = "\t")
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx <- filter(mastertable, TF == "pbx3" | Gene =="pbx3")
# filter master table for rows where TF is meis1 and the gene is meis1
Master_meis <- filter(mastertable, TF == "meis1" | Gene =="meis1")
# rowbind to one table
Master_pbx_meis <- rbind(Master_pbx, Master_meis)
# view table
datatable(Master_pbx_meis)
datatable(pbx3)
colbane
colnames(Master_pbx)
# 6hpa
pbx3_6 <- filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17]
pbx3_6
# 6hpa
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17])
pbx3_6
# Read in GO Tables
Go6hpa <-  read.table("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/outs_figures/GO6hpa.txt", sep = "\t", header = TRUE, row.names = 1)
Go6hpa$Timepoint <- "6hpa"
Go24hpa <-  read.table("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/outs_figures/GO24hpa.txt", sep = "\t", header = TRUE, row.names = 1)
Go24hpa$Timepoint <- "24hpa"
Go72hpa <-  read.table("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/outs_figures/GO72hpa.txt", sep = "\t", header = TRUE, row.names = 1)
Go72hpa$Timepoint <- "72hpa"
# rbind tables
Go <- rbind(Go6hpa, Go24hpa, Go72hpa)
test <- Go[grep(Go$intersection, pattern = concat.grep(pbx3_6)),]
test
datatable(test)
pbx3_6
# 6hpa
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,17])
# 72hpa
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3")[,17])
pbx3_24
# view table
datatable(Master_pbx_meis)
pbx3_72
# 6hpa
meis1_6 <- as.character(filter(Master_meis, timepoint=="6hpa" & TF == "meis1")[,17])
# 24hpa
meis1_24 <- as.character(filter(Master_meis, timepoint=="24hpa" & TF == "meis1")[,17])
# 72hpa
meis1_72 <- as.character(filter(Master_meis, timepoint=="72hpa" & TF == "meis1")[,17])
meis1_6
meis1_72
length(meis1_6)
length(meis1_24)
length(meis1_72)
meis_all <- unique(meis1_6, meis1_24, meis1_72)
meis1_6
meis1_24
meis1_72
meis_all <- unique(c(meis1_6, meis1_24, meis1_72)
meis_all
meis_all <- unique(c(meis1_6, meis1_24, meis1_72)
meis_all <- unique(c(meis1_6, meis1_24, meis1_72))
meis_all <- unique(c(meis1_6, meis1_24, meis1_72))
meis_all
pbx_all <- unique(c(pbx3_6, pbx3_24, pbx3_72))
pbx_all
#GO BP#
GO_pbx_terms <- gost(query = as.character(pbx_all),
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE)  ##input gene list, run GO
#GO BP#
GO_pbx_terms <- gost(query = as.character(pbx_all),
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_pbx_terms <- GO2table(GO_pbx_terms)
datatable(GO_pbx_terms)
#GO BP#
GO_meis_terms <- gost(query = as.character(meis_all),
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE)  ##input gene list, run GO
# Make GO Table
GO_pbx_terms <- GO2table(GO_pbx_terms)
# Make GO Table
GO_meis_terms <- GO2table(GO_meis_terms)
GO_meis_terms
datatable(GO_meis_terms)
# 6hpa
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & Gene == "pbx3")[,17])
# 24hpa
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa" & Gene == "pbx3")[,17])
# 72hpa
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa" & Gene == "pbx3")[,17])
pbx_all_genes <- unique(c(pbx3_6, pbx3_24, pbx3_72))
pbx_all_genes
colnames(Master_pbx)
# 6hpa
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & Gene == "pbx3")[,1])
# 24hpa
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa" & Gene == "pbx3")[,1])
# 72hpa
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa" & Gene == "pbx3")[,1])
pbx_all_genes <- unique(c(pbx3_6, pbx3_24, pbx3_72))
pbx_all_genes
datatable(filter(Master_pbx, timepoint=="6hpa" & Gene == "pbx3"))
length(pbx3_6)
pbx3_6
# 6hpa
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17])
pbx3_6
length(pbx3_6)
length(pbx3_6)
# 6hpa
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17])
length(pbx3_6)
# 24hpa
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,17])
length(pbx3_24)
# 72hpa
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3")[,17])
length(pbx3_72)
# 6hpa
meis1_6 <- as.character(filter(Master_meis, timepoint=="6hpa" & TF == "meis1")[,17])
length(meis1_6)
# 24hpa
meis1_24 <- as.character(filter(Master_meis, timepoint=="24hpa" & TF == "meis1")[,17])
length(meis1_24)
# 72hpa
meis1_72 <- as.character(filter(Master_meis, timepoint=="72hpa" & TF == "meis1")[,17])
length(meis1_72)
# Read in pax.all seurat object
pax.all <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.combined_FINAL.RDS")
pax.all$AK_Names
# subset nerual clusters
pax.neural <- SubsetData(pax.combined, ident.use = c(NSC))
pax.combined <- pax.all
# subset nerual clusters
pax.neural <- SubsetData(pax.combined, ident.use = c(NSC))
# subset nerual clusters
Idents(pax.combined) <- pax.combined$AK_Names
pax.neural <- SubsetData(pax.combined, ident.use = c(NSC))
pax.combined$AK_Names
# Run dim plot and save out
DimPlot(pax.neural, reduction = "umap", label = TRUE, cols = my.color.neural) # plot umap of neural clusters
DimPlot(pax.combined)
pax.neural <- SubsetData(pax.combined, ident.use = c("NSC"))
# Run the standard workflow for visualization and clustering
pax.neural <- ScaleData(object = pax.neural, verbose = TRUE, features = rownames(pax.neural))
pax.neural <- RunPCA(object = pax.neural, npcs = 30, verbose = TRUE) # verbose shows us how long its running
ElbowPlot(pax.neural, ndims = 30)
# umap and Clustering
pax.neural <- RunUMAP(object = pax.neural, reduction = "pca", dims = 1:25) # reduce by pca to a umap reduction
pax.neural <- FindNeighbors(object = pax.neural, reduction = "pca", dims = 1:25) # find nearesst neighbors
pax.neural <- FindClusters(pax.neural, resolution = 0.3) # get clusters ## resolution at 0.3 for 050719
# Run dim plot and save out
DimPlot(pax.neural, reduction = "umap", label = TRUE, cols = my.color.neural) # plot umap of neural clusters
# Set Color Palette
my.color <- c(lacroix_palette("PeachPear", type = "discrete"), lacroix_palette("Lime", type = "discrete"),  lacroix_palette("MurePepino", type = "discrete"), lacroix_palette("PassionFruit", type = "discrete"), lacroix_palette("Lemon", type = "discrete"))
my.color.neural <- c("#2CB11B", "#E9E4A6", "#DFCEE0" , "#E9A17C", "#1BB6AF" , "#172869" , "#FF3200")
my.color1 <- lacroix_palette(type = "paired")
standard.color <- c("grey89", "green4")
condition.color <- c( "#6F0909","#6F0909", "#C0C0C0")
cc_colors <- c((lacroix_palette("Lime"))[c(1,3)], "black")
# Run dim plot and save out
DimPlot(pax.neural, reduction = "umap", label = TRUE, cols = my.color.neural) # plot umap of neural clusters
pax.neural <- FindClusters(pax.neural, resolution = 0.5) # get clusters ## resolution at 0.3 for 050719
# Run dim plot and save out
DimPlot(pax.neural, reduction = "umap", label = TRUE, cols = my.color.neural) # plot umap of neural clusters
DimPlot(pax.neural, reduction = "umap", group.by = "condition", cols = condition.color) # plot umap and color cells by condition
DimPlot(pax.neural, reduction = "umap", split.by = "condition", cols = my.color.neural)  # plot umap and split to individual plots by condition
FeaturePlot(pax.neural, features = c("sox2", "neurog1", "elavl4", "prdm14")) # plot neural markers
FeaturePlot(pax.neural, features = c("sox2", "fabp7")) # plot neural markers
## scaledata for "RNA"
DefaultAssay(pax.neural) <- "RNA"
pax.neural <- ScaleData(object = pax.neural, verbose = TRUE, features = rownames(pax.neural))
FeaturePlot(pax.neural, features = c("vim", "nes", "hes1", "slc1a3", "fabp7")) # plot neural markers under RNA assay
FeaturePlot(pax.neural, features = c("foxa1", "shh"))
FeaturePlot(pax.neural, features = c("foxa2", "shh", "ferd3l", "lmx1b"))
FeaturePlot(pax.neural, features = c("foxa2", "shh", "ferd3l", "arx"))
FeaturePlot(pax.neural, features = c("bmp4"))
FeaturePlot(pax.neural, features = c("bmp4", "shh"))
FindGene(pax.neural, "bmp|shh")
test <- FindGene(pax.neural, "bmp|shh")
FeaturePlot(pax.neural, features = test)
test <- FindGene(pax.neural, "bmp|shh|gli|ptch")
test
Dotplot(pax.neural, features=test, cols=c("blue", "gold")) + coord_flip + rotateaxis
DotPlot(pax.neural, features=test, cols=c("blue", "gold")) + coord_flip + rotateaxis
DotPlot(pax.neural, features=test, cols=c("blue", "gold")) + coord_flip() + RotatedAxis()
nsc0 <- FindMarkers(pax.neural, ident.1 = "0", only.pos = TRUE, verbose = TRUE)
nsc1 <- FindMarkers(pax.neural, ident.1 = "1", only.pos = TRUE, verbose = TRUE)
nsc2 <- FindMarkers(pax.neural, ident.1 = "2", only.pos = TRUE, verbose = TRUE)
datatable(nsc0)
datatable(filter(nsc0, pct.1-pct.2>0.3))
datatable(filter(nsc0, pct.1-pct.2>0.1))
nsc0$gene <- rownames(nsc0)
nsc1$gene <- rownames(nsc1)
nsc2$gene <- rownames(nsc2)
datatable(filter(nsc0, pct.1-pct.2>0.1))
datatable(filter(nsc0, pct.1-pct.2>0.2))
datatable(filter(nsc0, pct.1-pct.2>0.3))
FeaturePlot(pax.neural, features = filter(nsc0, pct.1-pct.2>0.3)[,6])
datatable(filter(nsc1, pct.1-pct.2>0.3))
FeaturePlot(pax.neural, features = filter(nsc1, pct.1-pct.2>0.3)[,6])
datatable(filter(nsc2, pct.1-pct.2>0.3))
datatable(filter(nsc2, pct.1-pct.2>0.4))
datatable(filter(nsc2, pct.1-pct.2>0.5))
FeaturePlot(pax.neural, features = filter(nsc2, pct.1-pct.2>0.3)[,6])
FeaturePlot(pax.neural, features = filter(nsc2, pct.1-pct.2>0.3)[1:4,6])
datatable(filter(nsc1, pct.1-pct.2>0.3))
datatable(filter(nsc0, pct.1-pct.2>0.3))
datatable(filter(nsc1, pct.1-pct.2>0.3))
saveRDS(pax.neural, "pax.nsc_FINAL.RDS")
test <- FindGene(pax.neural, "bmp|shh|gli|ptch")
test
FeaturePlot(pax.neural, "gli1")
FeaturePlot(pax.neural, "ptch2")
FeaturePlot(pax.neural, "shh")
FeaturePlot(pax.neural, "bmp3")
FeaturePlot(pax.neural, "bmp4")
FeaturePlot(pax.neural, c("bmp1", "bmp2", "bmp3", "bmpr1a"))
FeaturePlot(pax.neural, features = filter(nsc0, pct.1-pct.2>0.3)[,6])
FeaturePlot(pax.neural, features = filter(nsc2, pct.1-pct.2>0.3)[1:4,6])
datatable(filter(nsc0, pct.1-pct.2>0.2))
FeaturePlot(pax.neural, features = filter(nsc0, pct.1-pct.2>0.2)[5:9,6])
FeaturePlot(pax.neural, features = filter(nsc0, pct.1-pct.2>0.2)[21:25,6])
datatable(filter(nsc1, pct.1-pct.2>0.2))
FeaturePlot(pax.neural, features = filter(nsc1, pct.1-pct.2>0.3)[5:8,6])
FeaturePlot(pax.neural, features = filter(nsc1, pct.1-pct.2>0.2)[5:8,6])
datatable(filter(nsc2, pct.1-pct.2>0.5))
datatable(filter(nsc2, pct.1-pct.2>0.6))
FeaturePlot(pax.neural, features = filter(nsc2, pct.1-pct.2>0.6)[,6])
# Set colors
my.color.neural <- c("#2CB11B", "#E9E4A6", "#DFCEE0" , "#E9A17C", "#1BB6AF" , "#172869" , "#FF3200")
condition.color <- c( "#6F0909", "#C0C0C0")
cc_colors <- c((lacroix_palette("Lime"))[c(1,3)], "black")
# Set working directory
setwd("~/Desktop/pax6 paper/Final Markdowns/SingleCell/analysis/")
# Read in pax.neural seurat object
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
# read in plotting data
pax.neural.plotting<- read.table("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_plotting.txt", sep = "\t")
# factor plotting table for plotting
pax.neural.plotting$AK_Names <- factor(pax.neural.plotting$AK_Names, levels = c("NSC", "Transition", "Neural.A","Neural.B", "Neural.C", "Neural.D", "Prdm14" ))
pax.neural.plotting$condition <- factor(pax.neural.plotting$condition, levels = c("uninj", "dmso", "iwr"))
pax.neural.plotting$three_state <- factor(pax.neural.plotting$three_state, levels = c("NSC", "Differentiating", "Neuron"))
pax.neural.plotting$Laevis <- factor(pax.neural.plotting$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron" , "Interneurons",  "Motor Neuron" , "Vulnerable Motor Neuron", "Motor Neuron (leptin+)" , "Dopaminergic Neurons" ))
pax.neural.plotting$Phase <- factor(pax.neural.plotting$Phase, levels = c("S", "G2M", "G1"))
# UMAP with all cells aligned in one plot
ggplot(pax.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names)) +
geom_point(stat="identity") +
scale_color_manual(values = my.color.neural) +
Seurat:::NoAxes() +
theme(legend.position = "bottom") +
blank_theme
# UMAP with all cells aligned in one plot
ggplot(pax.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=Laevis)) +
geom_point(stat="identity") +
scale_color_manual(values = my.color.neural) +
Seurat:::NoAxes() +
theme(legend.position = "bottom") +
blank_theme
pax.neural.plotting$Laevis <- factor(pax.neural.plotting$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron" , "Interneurons" , "Vulnerable Motor",  "Motor Neuron", "Neuron", "Motor Neuron (leptin+)" , "Dopaminergic Neurons" ))
# UMAP with all cells aligned in one plot
ggplot(pax.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=Laevis)) +
geom_point(stat="identity") +
scale_color_manual(values = my.color.neural) +
Seurat:::NoAxes() +
theme(legend.position = "bottom") +
blank_theme
pax.neural.plotting$Laevis <- factor(pax.neural.plotting$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron" , "Interneurons" , "Vulnerable Motor Neuron",  "Motor Neuron", "Motor Neuron (leptin+)" , "Dopaminergic Neurons" ))
# UMAP with all cells aligned in one plot
ggplot(pax.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=Laevis)) +
geom_point(stat="identity") +
scale_color_manual(values = my.color.neural) +
Seurat:::NoAxes() +
theme(legend.position = "bottom") +
blank_theme
# read in plotting data
pax.neural.plotting<- read.table("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_plotting.txt", sep = "\t")
# factor plotting table for plotting
pax.neural.plotting$AK_Names <- factor(pax.neural.plotting$AK_Names, levels = c("NSC", "Transition", "Neural.A","Neural.B", "Neural.C", "Neural.D", "Prdm14" ))
pax.neural.plotting$condition <- factor(pax.neural.plotting$condition, levels = c("uninj", "dmso", "iwr"))
pax.neural.plotting$three_state <- factor(pax.neural.plotting$three_state, levels = c("NSC", "Differentiating", "Neuron"))
pax.neural.plotting$Laevis <- factor(pax.neural.plotting$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron" , "Interneurons" , "Vulnerable Motor Neuron",  "Motor Neuron", "Motor Neuron (leptin+)" , "Dopaminergic Neurons" ))
pax.neural.plotting$Phase <- factor(pax.neural.plotting$Phase, levels = c("S", "G2M", "G1"))
# UMAP with all cells aligned in one plot
ggplot(pax.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=Laevis)) +
geom_point(stat="identity") +
scale_color_manual(values = my.color.neural) +
Seurat:::NoAxes() +
theme(legend.position = "bottom") +
blank_theme
# change seurat object identity to Laevis names
Idents(pax.neural) <- "Laevis"
# Plot umap with seurat
DimPlot(pax.neural, label = FALSE, cols = my.color.neural) + NoAxes() + NoLegend()
# change seurat object identity to Laevis names
Idents(pax.neural) <- Laevis
Idents(pax.neural) <- pax.neural$AK_Names
Idents(pax.neural)
pax.neural <- RenameIdents(pax.neural,
`NSC` = "Spinal Cord Progenitor",
`Neural.B` = "Vulnerable Motor Neuron",
`Transition` = "Differentiating Neuron",
`Neural.A` = "Interneurons",
`Neural.D` = "Motor Neuron (leptin+)",
`Prdm14` = "Motor Neuron",
`Neural.C` = "Dopaminergic Neurons")
pax.neural$Laevis <- pax.neural@active.ident
pax.neural$Laevis
pax.neural$Laevis <- factor(pax.neural$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron", "Interneurons", "Vulnerable Motor Neuron", "Motor Neuron", "Motor Neuron (leptin+)", "Dopaminergic Neurons"))
Idents(pax.neural) <- pax.neural$Laevis
DimPlot(pax.neural, cols = my.color.neural, label = TRUE)
# # Save out all cells
# saveRDS(pax.combined, "pax.combined_FINAL.RDS") # saved 3 Sept 2019
# # Save out all cells
saveRDS(pax.neural, "pax.neural_FINAL.RDS") # save 12 Aug 2019
# change seurat object identity to Laevis names
Idents(pax.neural) <- pax.neural$
# Plot umap with seurat
DimPlot(pax.neural, label = FALSE, cols = my.color.neural) + NoAxes() + NoLegend()
# change seurat object identity to Laevis names
Idents(pax.neural) <- pax.neural$
# Plot umap with seurat
DimPlot(pax.neural, label = FALSE, cols = my.color.neural) + NoAxes() + NoLegend()
# change seurat object identity to Laevis names
Idents(pax.neural) <- pax.neural$
# Plot umap with seurat
DimPlot(pax.neural, label = FALSE, cols = my.color.neural) + NoAxes() + NoLegend()
# Read in pax.neural seurat object
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
# change seurat object identity to Laevis names
Idents(pax.neural) <- pax.neural$
# Plot umap with seurat
DimPlot(pax.neural, label = FALSE, cols = my.color.neural) + NoAxes() + NoLegend()
pax.neural
FeaturePlot(pax.neural, "sox2")
# Read in pax.neural seurat object
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
# change seurat object identity to Laevis names
Idents(pax.neural) <- pax.neural$
# Plot umap with seurat
DimPlot(pax.neural, label = FALSE, cols = my.color.neural,) + NoAxes() + NoLegend()
# Read in pax.neural seurat object
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
Idents(pax.neural) <- pax.neural$AK_Names
Idents(pax.neural)
pax.neural <- RenameIdents(pax.neural,
`NSC` = "Spinal Cord Progenitor",
`Neural.B` = "Vulnerable Motor Neuron",
`Transition` = "Differentiating Neuron",
`Neural.A` = "Interneurons",
`Neural.D` = "Motor Neuron (leptin+)",
`Prdm14` = "Motor Neuron",
`Neural.C` = "Dopaminergic Neurons")
Idents(pax.neural)
pax.neural$Laevis <- pax.neural@active.ident
pax.neural$Laevis
pax.neural$Laevis <- factor(pax.neural$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron", "Interneurons", "Vulnerable Motor Neuron", "Motor Neuron", "Motor Neuron (leptin+)", "Dopaminergic Neurons"))
pax.neural$Laevis
Idents(pax.neural) <- pax.neural$Laevis
DimPlot(pax.neural, cols = my.color.neural, label = TRUE)
DimPlot(pax.neural, label = TRUE)
# # Save out all cells
# saveRDS(pax.combined, "pax.combined_FINAL.RDS") # saved 3 Sept 2019
# # Save out all cells
saveRDS(pax.neural, "pax.neural_FINAL.RDS") # save 12 Aug 2019
# change seurat object identity to Laevis names
Idents(pax.neural) <- pax.neural$
# Plot umap with seurat
DimPlot(pax.neural, label = FALSE, cols = my.color.neural,) + NoAxes() + NoLegend()
# load functions
source("~/Desktop/pax6 paper/Final Markdowns/common_source_functions.R")
# Set colors
my.color.neural <- c("#2CB11B", "#E9E4A6", "#DFCEE0" , "#E9A17C", "#1BB6AF" , "#172869" , "#FF3200")
condition.color <- c( "#6F0909", "#C0C0C0")
cc_colors <- c((lacroix_palette("Lime"))[c(1,3)], "black")
# Set working directory
setwd("~/Desktop/pax6 paper/Final Markdowns/SingleCell/analysis/")
# Read in pax.neural seurat object
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
# read in plotting data
pax.neural.plotting<- read.table("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_plotting.txt", sep = "\t")
# factor plotting table for plotting
pax.neural.plotting$AK_Names <- factor(pax.neural.plotting$AK_Names, levels = c("NSC", "Transition", "Neural.A","Neural.B", "Neural.C", "Neural.D", "Prdm14" ))
pax.neural.plotting$condition <- factor(pax.neural.plotting$condition, levels = c("uninj", "dmso", "iwr"))
pax.neural.plotting$three_state <- factor(pax.neural.plotting$three_state, levels = c("NSC", "Differentiating", "Neuron"))
pax.neural.plotting$Laevis <- factor(pax.neural.plotting$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron" , "Interneurons" , "Vulnerable Motor Neuron",  "Motor Neuron", "Motor Neuron (leptin+)" , "Dopaminergic Neurons" ))
pax.neural.plotting$Phase <- factor(pax.neural.plotting$Phase, levels = c("S", "G2M", "G1"))
# change seurat object identity to Laevis names
Idents(pax.neural) <- pax.neural$
# Plot umap with seurat
# UMAP with all cells aligned in one plot with ggplot
ggplot(pax.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=Laevis)) +
geom_point(stat="identity") +
scale_color_manual(values = my.color.neural) +
Seurat:::NoAxes() +
theme(legend.position = "bottom") +
blank_theme
library(ggplot2)
# change seurat object identity to Laevis names
Idents(pax.neural) <- pax.neural$
# Plot umap with seurat
# UMAP with all cells aligned in one plot with ggplot
ggplot(pax.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=Laevis)) +
geom_point(stat="identity") +
scale_color_manual(values = my.color.neural) +
Seurat:::NoAxes() +
theme(legend.position = "bottom") +
blank_theme
