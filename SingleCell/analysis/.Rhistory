heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes[1:20], ]
#paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC|-like", ignore.case = TRUE),] # remove unannotated
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
# Make heatmap for pbx3 targets
gene <- concat.grep(meis1_24)
GOGenes <- grep(gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC|-like", ignore.case = TRUE),] # remove unannotated
paxGoGenes <- paxGoGenes[1:20,]
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
table.6 <- read.table("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/outs/table.6.txt", sep = "\t")
table.24 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.24.txt", sep = "\t")
table.72 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.72.txt", sep = "\t")
table.6 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.6.txt", sep = "\t")
# make master list of tables
mastertable <- rbind(table.24, table.6, table.72)
#GO BP#
GO_pbx_terms <- gost(query = as.character(pbx_all),
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
#GO BP#
GO_pbx_terms <- gost(query = as.character(pbx_all),
organism = "hsapien",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
#GO BP#
GO_pbx_terms <- gost(query = as.character(pbx_all),
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make heatmap for pbx3 targets
gene <- concat.grep(meis1_24)
GOGenes <- grep(gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC|-like", ignore.case = TRUE),] # remove unannotated
paxGoGenes <- paxGoGenes[1:20,]
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
# read in DA motif tables from GRN prediction
table.6 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.6.txt", sep = "\t")
table.24 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.24.txt", sep = "\t")
table.72 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.72.txt", sep = "\t")
# make master list of tables
mastertable <- rbind(table.24, table.6, table.72)
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx <- filter(mastertable, TF == "pbx3" | Gene =="pbx3")
# filter master table for rows where TF is meis1 and the gene is meis1
Master_meis <- filter(mastertable, TF == "meis1" | Gene =="meis1")
# rowbind to one table
Master_pbx_meis <- rbind(Master_pbx, Master_meis)
# view table
datatable(Master_pbx_meis)
timepoints <- read.table("outs/DA_timepoints.txt", header = TRUE, sep = "\t", row.names = 1) # between timepoints within one condition
log.counts.timepoints <- as.matrix(read.table("outs/log.counts_timepoints.txt", header = TRUE, sep = "\t", row.names = 1)) # log counts for timepoints
# setwd
setwd("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/")
timepoints <- read.table("outs/DA_timepoints.txt", header = TRUE, sep = "\t", row.names = 1) # between timepoints within one condition
log.counts.timepoints <- as.matrix(read.table("outs/log.counts_timepoints.txt", header = TRUE, sep = "\t", row.names = 1)) # log counts for timepoints
# Identify genes that pbx3 targets at each timepoint
# 6hpa
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,1])
length(pbx3_6)
# 24hpa
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,1])
length(pbx3_24)
# 72hpa
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3")[,1])
length(pbx3_72)
pbx_all <- unique(c(pbx3_6, pbx3_24, pbx3_72))
# Make heatmap for pbx3 targets
gene <- concat.grep(pbx3_72)
GOGenes <- grep(gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC", ignore.case = TRUE),] # remove unannotated
# Make heatmap for pbx3 targets
gene <- concat.grep(pbx3_72)
# 72hpa
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3")[,1])
pbx3_72
# Make heatmap for pbx3 targets
gene <- concat.grep(pbx3_72)
# source functions
source("~/Desktop/R_working/common_source_functions.R")
# Make heatmap for pbx3 targets
gene <- concat.grep(pbx3_72)
GOGenes <- grep(gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC", ignore.case = TRUE),] # remove unannotated
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
# Identify genes that meis1 targets at each timepoint
# 6hpa
meis1_6 <- as.character(filter(Master_meis, timepoint=="6hpa" & TF == "meis1")[,1])
# load packages
library(Seurat)
library(LaCroixColoR)
library(ggplot2)
library(cowplot)
library(tidyr)
library(DT)
library(dplyr)
library(ggpubr)
library(rmarkdown)
# load functions
source("~/Desktop/pax6 paper/Final Markdowns/common_source_functions.R")
# Set colors
my.color.neural <- c("#2CB11B", "#E9E4A6", "#DFCEE0" , "#E9A17C", "#1BB6AF" , "#172869" , "#FF3200")
condition.color <- c( "#6F0909", "#C0C0C0")
cc_colors <- c((lacroix_palette("Lime"))[c(1,3)], "black")
# Set working directory
setwd("~/Desktop/pax6 paper/Final Markdowns/SingleCell/analysis/")
# Read in pax.neural seurat object
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
# read in plotting data
pax.neural.plotting<- read.table("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_plotting.txt", sep = "\t")
# factor plotting table for plotting
pax.neural.plotting$AK_Names <- factor(pax.neural.plotting$AK_Names, levels = c("NSC", "Transition", "Neural.A","Neural.B", "Neural.C", "Neural.D", "Prdm14" ))
pax.neural.plotting$condition <- factor(pax.neural.plotting$condition, levels = c("uninj", "dmso", "iwr"))
pax.neural.plotting$three_state <- factor(pax.neural.plotting$three_state, levels = c("NSC", "Differentiating", "Neuron"))
pax.neural.plotting$Laevis <- factor(pax.neural.plotting$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron" , "Interneurons",  "Motor Neuron" , "Vulnerable Motor Neuron", "Motor Neuron (leptin+)" , "Dopaminergic Neurons" ))
pax.neural.plotting$Phase <- factor(pax.neural.plotting$Phase, levels = c("S", "G2M", "G1"))
# Define ins and outs for extraction function
Idents(pax.neural) <- "laevis_condition"
average_clusters <- t(as.data.frame(AverageExpression(pax.neural, assays = "RNA", use.counts = TRUE, features = c("meis1", "pbx3"))))
outs <- c("meis1_out", "pbx3_out")
genes <- c("meis1", "pbx3")
# Extract average expression data for plotting
seuratTOplot(average_clusters, gene = genes, outs = outs) # run to plot function (found in sourced functions)
objects <- ls(pattern=".*_out") # get all object names made in previous function
objects.list <- lapply(objects, get) # get outs
plot <- do.call(bind_rows, objects.list) # rowbind both gene data sets
# Make metdata columns
plot$treatment <- gsub(plot$condition, pattern = "RNA.", replacement = "") # split condition column
plot <- separate(plot, col = treatment, sep = "_", into = c("treament", "celltype")) # make seperate columns for treatment and celltype
plot$treament <- gsub(plot$treament, pattern = "dmso", replacement = "24hpa") # rename dmso to 24hpa
# Factor data to order
plot$gene <- factor(plot$gene, levels = c("meis1", "pbx3")) # order gene row for plot
plot$celltype
plot$treament <- factor(plot$treament, levels = c("uninj", "24hpa", "iwr")) # order conditions
plot$celltype <- factor(plot$celltype, levels = c("Spinal.Cord.Progenitor", "Differentiating.Neuron", "Interneurons", "Vulnerable.Motor.Neuron", "Motor.Neuron", "Motor.Neuron..leptin..", "Dopaminergic.Neurons"))
## plot average expression of genes across each cluster at each timepoint
time.plot <- filter(plot, treament %in% c("uninj", "24hpa"))
pmeis <- ggplot(filter(time.plot, gene == "meis1"), aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
theme(legend.position = "none", text = element_text(size=20)) +
Seurat:::RotatedAxis()
ppbx <- ggplot(filter(time.plot, gene == "pbx3"), aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
theme(legend.position = "none", text = element_text(size=20)) +
Seurat:::RotatedAxis()
plot_grid(pmeis, ppbx, nrow = 2)
pmeis <- ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype)
pmeis <- ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20)) +
Seurat:::RotatedAxis()
# Predicted GRN
" 6hpa_Gene:meis1 -> 24hpa_TF:meis1 -> 72hpa_TF:runx|etv1|klf9"
" 6hpa_Gene:etv1 -> 24hpa_TF:etv1 -> 72hpa_TF:pbx3"
# Define ins and outs for extraction function
Idents(pax.neural) <- "laevis_condition"
average_clusters <- t(as.data.frame(AverageExpression(pax.neural, assays = "RNA", use.counts = TRUE, features = c("meis1", "pbx3"))))
outs <- c("meis1_out", "pbx3_out")
genes <- c("meis1", "pbx3")
# Extract average expression data for plotting
seuratTOplot(average_clusters, gene = genes, outs = outs) # run to plot function (found in sourced functions)
objects <- ls(pattern=".*_out") # get all object names made in previous function
objects.list <- lapply(objects, get) # get outs
plot <- do.call(bind_rows, objects.list) # rowbind both gene data sets
# Make metdata columns
plot$treatment <- gsub(plot$condition, pattern = "RNA.", replacement = "") # split condition column
plot <- separate(plot, col = treatment, sep = "_", into = c("treament", "celltype")) # make seperate columns for treatment and celltype
plot$treament <- gsub(plot$treament, pattern = "dmso", replacement = "24hpa") # rename dmso to 24hpa
# Factor data to order
plot$gene <- factor(plot$gene, levels = c("meis1", "pbx3")) # order gene row for plot
plot$treament <- factor(plot$treament, levels = c("uninj", "24hpa", "iwr")) # order conditions
plot$celltype <- factor(plot$celltype, levels = c("Spinal.Cord.Progenitor", "Differentiating.Neuron", "Interneurons", "Vulnerable.Motor.Neuron", "Motor.Neuron", "Motor.Neuron..leptin..", "Dopaminergic.Neurons"))
## plot average expression of genes across each cluster at each timepoint
time.plot <- filter(plot, treament %in% c("uninj", "24hpa"))
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20)) +
Seurat:::RotatedAxis()
plot$celltype
plot$celltype <- factor(plot$celltype, levels = c("Spinal.Cord.Progenitor", "Differentiating.Neuron", "Interneurons", "Vulnerable.Motor.Neuron", "Dopaminergic.Neurons", "Motor.Neuron..leptin..", "Motor.Neuron"))
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20)) +
Seurat:::RotatedAxis()
## plot average expression of genes across each cluster at each timepoint
time.plot <- filter(plot, treament %in% c("uninj", "24hpa"))
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20)) +
Seurat:::RotatedAxis()
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20), axis.text.x = 30, axis.title.y = 30 ) +
Seurat:::RotatedAxis()
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20), text = axis.text.x = 30, axis.title.y = 30 ) +
Seurat:::RotatedAxis()
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20), axis.title.x = element_text(size = 30) ) +
Seurat:::RotatedAxis()
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20), axis.text.x = element_text(size = 30) ) +
Seurat:::RotatedAxis()
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20), axis.text.x = element_text(size = 30), axis.text.y = element_text(size = 30) ) +
Seurat:::RotatedAxis()
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=10), axis.text.x = element_text(size = 30), axis.text.y = element_text(size = 30) ) +
Seurat:::RotatedAxis()
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=15), axis.text.x = element_text(size = 30), axis.text.y = element_text(size = 30) ) +
Seurat:::RotatedAxis()
ggplot(time.plot, aes(x=treament, y=expression, group=treament, fill=celltype))+
geom_bar(stat = "identity", position = "dodge2") +
scale_fill_manual(values = my.color.neural) +
theme_bw() +
facet_grid(gene~celltype) +
theme(legend.position = "none", text = element_text(size=20), axis.text.x = element_text(size = 30), axis.text.y = element_text(size = 30), axis.title.x = element_text(size = 25), axis.title.y = element_text(size = 25)  ) +
Seurat:::RotatedAxis()
# Plot feature plot of pbx3 and meis 1 and split by condition
FeaturePlot(pax.neural , features = c("pbx3", "meis1"), split.by = "mock_24", order = TRUE, combine = TRUE) + NoAxes()
# Plot feature plot of pbx3 and meis 1 and split by condition
FeaturePlot(pax.neural , features = c("pbx3", "meis1"), split.by = "mock_24", order = TRUE, combine = TRUE, cols=c("grey89", "#172869"
)) + NoAxes()
# 6hpa
meis1_6 <- as.character(filter(Master_meis, timepoint=="6hpa" & TF == "meis1")[,1])
# read in DA motif tables from GRN prediction
table.6 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.6.txt", sep = "\t")
table.24 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.24.txt", sep = "\t")
table.72 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.72.txt", sep = "\t")
# make master list of tables
mastertable <- rbind(table.24, table.6, table.72)
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx <- filter(mastertable, TF == "pbx3" | Gene =="pbx3")
# filter master table for rows where TF is meis1 and the gene is meis1
Master_meis <- filter(mastertable, TF == "meis1" | Gene =="meis1")
# rowbind to one table
Master_pbx_meis <- rbind(Master_pbx, Master_meis)
# view table
datatable(Master_pbx_meis)
# Identify genes that pbx3 targets at each timepoint
# 6hpa
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,1])
# 24hpa
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,1])
# 72hpa
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3")[,1])
pbx3_6
# Identify genes that pbx3 targets at each timepoint
# 6hpa
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,1])
pbx3_6
# 24hpa
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,1])
pbx3_24
# 72hpa
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3")[,1])
pbx_all <- unique(c(pbx3_6, pbx3_24, pbx3_72))
pbx_all
# Make heatmap for pbx3 targets
gene <- concat.grep(pbx3_72)
gene
# Identify genes that pbx3 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE)
# Identify genes that pbx3 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE)
# Identify genes that pbx3 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa pbx3 targets")
# 24hpa
treegraph(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "24hpa pbx3 targets")
# 72hpa
treegraph(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "72hpa pbx3 targets")
# Identify genes that meis1 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "meis1"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa meis1 targets")
# Identify genes that meis1 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "meis1"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa meis1 targets")
# Identify genes that meis1 targets at each timepoint
# 6hpa
treegraph(filter(Master_meis, timepoint=="6hpa" & TF == "meis1"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa meis1 targets")
# 24hpa
treegraph(filter(Master_meis, timepoint=="24hpa" & TF == "meis1"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "24hpa meis1 targets")
# 72hpa
treegraph(filter(Master_meis, timepoint=="72hpa" & TF == "meis1"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "72hpa pbx3 targets")
# view table
datatable(Master_pbx_meis)
pbx3_6_gene <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17])
pbx3_6_gene
pbx3_24_gene <- as.character(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,17])
pbx3_72_gene <- as.character(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3")[,17])
# GO
GO_pbx_terms <- gost(query = pbx3_6_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_pbx_terms <- GO2table(GO_pbx_terms)
GO_pbx_terms
# GO
GO_pbx6_terms <- gost(query = pbx3_6_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = TRUE)  ##input gene list, run GO
# GO
GO_pbx6_terms <- gost(query = pbx3_6_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
datatable(GO_pbx6_terms)
class(GO_pbx6_terms)
# GO
GO_pbx6_terms <- gost(query = pbx3_6_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_pbx6_terms <- GO2table(GO_pbx6_terms)
datatable(GO_pbx6_terms)
# GO
GO_pbx24_terms <- gost(query = pbx3_24_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_pbx24_terms <- GO2table(GO_pbx24_terms)
# GO
GO_pbx72_terms <- gost(query = pbx3_72_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_pbx72_terms <- GO2table(GO_pbx72_terms)
datatable(GO_pbx72_terms)
meis1_6_gene <- as.character(filter(Master_meis, timepoint=="6hpa" & TF == "meis1")[,17]) # target genes
# GO
GO_meis6_terms <- gost(query = meis1_6_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
meis1_24_gene <- as.character(filter(Master_meis, timepoint=="24hpa" & TF == "meis1")[,17]) # target genes
# GO
GO_meis24_terms <- gost(query = meis1_24_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_meis24_terms <- GO2table(GO_meis24_terms)
pbx3_6_gene <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17]) # target genes
pbx3_6_gene
print(pbx3_6_gene)
# GO
GO_pbx6_terms <- gost(query = pbx3_6_gene,
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_pbx6_terms <- GO2table(GO_pbx6_terms)
datatable(GO_pbx6_terms, caption = "pbx3 6hpa go")
