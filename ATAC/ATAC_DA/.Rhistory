FindGene(pax.neural, "vax")
library(ggplot2)
library(RColorBrewer)
library(DT)
library(knitr)
library(tidyr)
library(gridExtra)
library(GenomicRanges)
library(ggpubr)
library(DT)
# Set Working Directory
setwd("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_QC_Counts/")
# read in bowtie outputs
bowtie <-  read.table("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_QC_Counts/summary_metrics.txt",
header = T,
sep = "\t",
stringsAsFactors = F)
# rename samples
bowtie$SAMPLE <- gsub(".*_05_", "", bowtie$SAMPLE)
bowtie$SAMPLE <- gsub("_Run.*", "", bowtie$SAMPLE)
bowtie$SAMPLEID <- gsub("_.*", "", bowtie$SAMPLE)
# convert percentage to 100
bowtie[,grep("PCT", colnames(bowtie))] <- bowtie[,grep("PCT", colnames(bowtie))] * 100
# Load meta data about samples
samples <-  read.table("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_QC_Counts/SeptATACSummary.txt",
header = T,
sep = "\t",
stringsAsFactors = F)
# rename bowtie output to summary
summary <- bowtie
summary$REPS <- c(2, 2, 2, 1, 1, 1, 1, 3, 3, 1, 3, 3, 1, 2, 1, 2, 1, 3, 2, 1, 1, 3, 3, 3, 3, 1, 3, 2, 2, 2, 2, 3)
# reassign misnamed sample P8F == W03_WT_0hpa
summary <- summary[-22,] #remove Leah's sample
summary$SAMPLE <- gsub(summary$SAMPLE, pattern = "P8F", replacement = "W03_WT_0hpa") #reassign name of sample
# add in library type
summary$LIBRARYTYPE <- gsub(summary$SAMPLE, pattern = ".*_WT_.*", replacement = "WT") # simplify wt terms
summary$LIBRARYTYPE <- gsub(summary$LIBRARYTYPE, pattern = ".*_pax6_.*", replacement = "pax6") # simplify pax6 terms
# add in library plotting column
summary$SAMPLEPLOT <- gsub(summary$SAMPLE, pattern = ".*_WT", replacement = "AllTissue") # simplify wt terms
summary$SAMPLEPLOT <- gsub(summary$SAMPLEPLOT, pattern = ".*_pax6", replacement = "pax6") # simplify pax6 terms
summary$SAMPLEPLOT <- gsub(summary$SAMPLEPLOT, pattern = "Whole-Tail", replacement = "uninjured") # simplify pax6 terms
summary$SAMPLEPLOT <- paste(summary$SAMPLEPLOT, summary$REPS, sep = "-")
# view summary
datatable(summary, caption = "Bowtie output")
library(IRanges)
library(biomaRt)
library(GenomicFeatures)
library(GenomicRanges)
files <- list.files(path = "~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_QC_Counts/MACS/", pattern=".*narrowPeak$", recursive = TRUE, full.names = T)
# Fix Filenames for Output in R
filenames <- gsub(".narrowPeak", "", files)
filenames <- gsub(".*_05_", "", filenames)
filenames <- gsub("_Run[0-9]+_S[0-9]+", "", filenames)
# Function to wrangle MACS outputs: Peaks 2 GRanges
peaks2granges <- function(peakstable) {
temp.gr <- with(peakstable, GRanges(chr, IRanges(start, end), strand, name, score, signalValue, pValue, qValue, peaks))
return(temp.gr)
}
loadMACS <- function(infiles, outfiles) {
for (i in 1:length(infiles)) {
if (file.info(infiles[i])$size > 0) {
temp.peaks <- read.table(infiles[i], sep="\t", header=FALSE)
colnames(temp.peaks) <- c("chr", "start", "end", "name", "score", "strand", "signalValue", "pValue", "qValue", "peaks")
temp.peaks$strand <- "*"
assign(outfiles[i], temp.peaks, envir = .GlobalEnv)
temp.peaks.gr <- peaks2granges(temp.peaks)
outnames.gr <- paste0(outfiles, ".gr")
assign(outnames.gr[i], temp.peaks.gr, envir = .GlobalEnv)
}
}
}
# Load MACS Outputs
loadMACS(files, filenames)
# view minimal MACS outputs
head(loadMACS)
# Make Summary DF
gr.files <- ls(pattern = "peaks.gr$") # make object of peaks.gr files
Sample <- gsub(".gr", "", gr.files) # remove suffix
Peaks <- vector() # make vector
for (i in 1:length(gr.files)) {
Peaks <- c(Peaks, length(get(gr.files[i])))
} # Get number of peaks in each MACs output file
MACS_summary <- data.frame(Sample, Peaks) # make data frame from previous loop
#reassign wrongly named samples P8F == W03_WT_0hpa
MACS_summary <- MACS_summary[-16,] #remove Leah's sample
MACS_summary$Sample <- gsub(MACS_summary$Sample, pattern = "P8F", replacement = "W03_WT_0hpa") #reassign name of sample
# remove _peaks from sample names for meging purposes
MACS_summary$Sample <- gsub(pattern = "_peaks", replacement = "", MACS_summary$Sample)
# merge macs and bowtie dataframes
MACS_summary <- merge.data.frame(MACS_summary, summary, by.x = "Sample", by.y = "SAMPLE" )
# make an aligned reads column
MACS_summary$Aligned_Reads <- MACS_summary$PF_READS_ALIGNED / 2 # make an aligned reads column
# View MACS summary
datatable(MACS_summary, caption = "Summary MACS outputs")
# Plot Number of peaks in each sample
ggplot(MACS_summary, aes(x=MACS_summary$SAMPLEPLOT, y=(MACS_summary$Peaks/1000), fill=MACS_summary$LIBRARYTYPE)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Thousands of Peaks") +
xlab("Sample") +
ggtitle("Number of Peaks Called by MACS2") +
theme_bw()+
scale_fill_manual(values = c("green4", "dodgerblue3"))+
theme(legend.position = "none")
Overlaps <- function(sample1.gr, sample2.gr) {
### Convert sample names to string and get rid of suffix (.gr)
samplename <- function(x) {
raw <- deparse(x)
sample.final <- gsub(".gr", "", raw)
return(sample.final)
}
overlap.df <- data.frame(findOverlaps(sample1.gr, sample2.gr))
tmp.v <- c(length(unique(overlap.df$queryHits)), length(unique(overlap.df$subjectHits)))
overlap.total <- tmp.v[which.max(tmp.v)]
sample1.venn <- length(sample1.gr)
sample2.venn <- length(sample2.gr)
venn.numbers <- c(sample1.venn, sample2.venn, overlap.total)
venn.samples <- c("sample1.gr", "sample2.gr", "overlap.total")
PercentOverlap <- c(overlap.total/sample1.venn*100, overlap.total/sample2.venn*100, NA)
df.overlap <- data.frame(venn.samples, venn.numbers, PercentOverlap)
names(venn.numbers) <- c(samplename(substitute(sample1.gr)), samplename(substitute(sample2.gr)), "Overlap")
grid.newpage()
venn.plot <- draw.pairwise.venn(area1 = venn.numbers[1],
area2 = venn.numbers[2],
cross.area = venn.numbers[3],
category = names(venn.numbers)[1:2],
lty = rep("blank", 2),
fill = c("light blue", "pink"),
alpha = rep(0.5, 2),
cat.pos = c(0, 0),
cat.dist = rep(0.025, 2),
scaled = T)
grid.draw(venn.plot)
return(df.overlap)
return(venn.plot)
}
library(VennDiagram)
Overlaps(WT_0hpa_F_peaks.gr, WT_0hpa_NF_peaks.gr)
Overlaps(P721_pax6_72hpa_peaks.gr, `PW1_pax6_Whole-Tail_peaks.gr`)
Overlaps(P241_pax6_24hpa_peaks.gr, `PW1_pax6_Whole-Tail_peaks.gr`)
Overlaps(P722_pax6_72hpa_peaks.gr, `PW1_pax6_Whole-Tail_peaks.gr`)
Overlaps(P242_pax6_24hpa_peaks.gr, `PW1_pax6_Whole-Tail_peaks.gr`)
# Set WD
setwd("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/")
# Read in counts table
counts <- read.table("peaks_counts.txt", header=T, sep="\t", row.names=1) #store file as counts
head(counts) #write out header of counts
colnames(counts) #write column names from counts
# create wanted column names
# gsub("identify what want to change", "change to", colnames(variable))
colnames(counts) <- gsub("...BAM.", "", colnames(counts))
#colnames(counts) <- gsub(".*05_", "", colnames(counts))
colnames(counts) <- gsub(".bam", "", colnames(counts))
### Filter out genes with low read counts ("unexpressed" genes) --
unex_filter <- which(rowSums(cpm(counts)) < 40) #take out peaks(in rows) that have sum of less than 20. Sum=peak value across dog samples
counts <- counts[-1 * unex_filter,] #reassign peaks in counts to be * -1
plot(counts$`06_SG_Wills_05_P61_pax6_6hpa_Run01_S6`, counts$`05_SG_Wills_05_W61_WT_6hpa_Run01_S5`)
# FullFileNames
FileName <- c("...BAM.01_SG_Wills_05_WW1_WT_Whole.Tail_Run01_S1.bam",    "...BAM.02_SG_Wills_05_PW1_pax6_Whole.Tail_Run01_S2.bam",
"...BAM.03_SG_Wills_05_W01_WT_0hpa_Run01_S3.bam",        "...BAM.04_SG_Wills_05_P01_pax6_0hpa_Run01_S4.bam",
"...BAM.05_SG_Wills_05_W61_WT_6hpa_Run01_S5.bam",         "...BAM.06_SG_Wills_05_P61_pax6_6hpa_Run01_S6.bam",
"...BAM.07_SG_Wills_05_W241_WT_24hpa_Run01_S7.bam",       "...BAM.08_SG_Wills_05_P241_pax6_24hpa_Run01_S8.bam",
"...BAM.09_SG_Wills_05_W721_WT_72hpa_Run01_S9.bam",       "...BAM.10_SG_Wills_05_P721_pax6_72hpa_Run01_S10.bam",
"...BAM.11_SG_Wills_05_WW11_WT_Whole.Tail_Run01_S11.bam", "...BAM.12_SG_Wills_05_WW2_WT_Whole.Tail_Run02_S1.bam",
"...BAM.13_SG_Wills_05_PW2_pax6_Whole.Tail_Run02_S2.bam", "...BAM.14_SG_Wills_05_P8F_Run02_S3.bam",
"...BAM.15_SG_Wills_05_P02_pax6_0hpa_Run02_S4.bam",       "...BAM.16_SG_Wills_05_W62_WT_6hpa_Run02_S5.bam",
"...BAM.17_SG_Wills_05_P62_pax6_6hpa_Run02_S6.bam",       "...BAM.18_SG_Wills_05_W242_WT_24hpa_Run02_S7.bam",
"...BAM.19_SG_Wills_05_P242_pax6_24hpa_Run02_S8.bam",     "...BAM.20_SG_Wills_05_W722_WT_72hpa_Run02_S9.bam",
"...BAM.21_SG_Wills_05_P722_pax6_72hpa_Run02_S10.bam",    "...BAM.22_SG_Wills_05_W7212_WT_72hpa_Run02_S11.bam",
"...BAM.23_SG_Wills_05_WW3_WT_Whole.Tail_Run03_S1.bam",   "...BAM.24_SG_Wills_05_PW3_pax6_Whole.Tail_Run03_S2.bam",
"...BAM.25_SG_Wills_05_W03_WT_0hpa_Run03_S3.bam",         "...BAM.26_SG_Wills_05_P03_pax6_0hpa_Run03_S4.bam",
"...BAM.27_SG_Wills_05_W63_WT_6hpa_Run03_S5.bam",         "...BAM.28_SG_Wills_05_P63_pax6_6hpa_Run03_S6.bam",
"...BAM.29_SG_Wills_05_W243_WT_24hpa_Run03_S7.bam",       "...BAM.30_SG_Wills_05_P243_pax6_24hpa_Run03_S8.bam",
"...BAM.31_SG_Wills_05_W723_WT_72hpa_Run03_S9.bam",       "...BAM.32_SG_Wills_05_P723_pax6_72hpa_Run03_S10.bam")
# Sample names
# Three position Naming
# 1st position indicates Genotype : W=WholeTail, P=Pax6
# 2nd position indicates Timepoint: W=WholeTail, 0=0hpa, 6=6hpa, 24=24hpa, 72=72hpa
# 3rd position indicates Bio Rep #: 1=biorep1, 2=biorep2, 3=biorep3
# WW11  is a special case where WW3 was split into two PCR reactions. WW11 = Wildtype WholeTail n711 primer
# W7212 is a special case where WW3 was split into two PCR reactions. W7212= Wildtype 72hpa     n712 primer
#   See notebook 3, pg7 for WW11 and W7212 sample prep details
SampleNames <- c("WW1", "PW1", "W01", "P01", "W61", "P61", "W241", "P241", "W721", "P721", "WW11", "WW2", "PW2", "P8F", "P02", "W62", "P62", "W242", "P242", "W722", "P722", "W7212", "WW3", "PW3", "W03", "P03", "W63", "P63", "W243", "P243", "W723", "P723")
##Data Input##
## "Metrics taken during ATAC-Seq library building Process"
CellID <- c("Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Whole-Tail", "Pax", "NA", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Pax", "Whole-Tail", "Pax")
CellID <- gsub(CellID, pattern = "Whole-Tail", replacement = "All_Tissue")
TimePt <- c("Whole-Tail", "Whole-Tail", "0hpa", "0hpa", "6hpa", "6hpa", "24hpa", "24hpa", "72hpa", "72hpa", "Whole-Tail", "Whole-Tail", "Whole-Tail", "NA", "0hpa", "6hpa", "6hpa", "24hpa", "24hpa", "72hpa", "72hpa", "72hpa", "Whole-Tail", "Whole-Tail", "0hpa", "0hpa", "6hpa", "6hpa", "24hpa", "24hpa", "72hpa", "72hpa")
TimePt <- gsub(TimePt, pattern = "Whole-Tail", replacement = "uninjured")
TailCount <- c(5, 20, 5, 20, 5, 20, 5, 20, 5, 19, "NA", 5, 20, "NA", 20, 5, 20, 5, 20, 5, 19, "NA", 5, 20, 5, 20, 5, 20, 6, 20, 6, 19)
CellCount <- c(766, 1214, 1215, 1366, 1803, 2083, 1803, 1577, 5806, 1799, "NA", 2231, 1715, "NA", 1425, 1985, 1819, 1695, 1120, 4728, 2817, "NA", 4827, 2128, 1366, 1803, 2083, 1803, 1985, 1784, 4957, 307)
Primer <- c("n701", "n702", "n703", "n704", "n705", "n706", "n707", "n708", "n709", "n710", "n711", "n701", "n702", "N703", "n704", "n705", "n706", "n707", "n708", "n709", "n710", "n712", "n701", "n702", "n703", "n704", "n705", "n706", "n707", "n708", "n709", "n710")
Barcode <- c("TAAGGCGA", "CGTACTAG", "AGGCAGAA", "TCCTGAGC", "GGACTCCT", "TAGGCATG", "CTCTCTAC", "CAGAGAGG", "GCTACGCT", "CGAGGCTG", "AAGAGGCA", "TAAGGCGA", "CGTACTAG", "AGGCAGAA", "TCCTGAGC", "GGACTCCT", "TAGGCATG", "CTCTCTAC", "CAGAGAGG", "GCTACGCT", "CGAGGCTG", "AAGAGGCA", "TAAGGCGA", "CGTACTAG", "AGGCAGAA", "TCCTGAGC", "GGACTCCT", "TAGGCATG", "CTCTCTAC", "CAGAGAGG", "GCTACGCT", "CGAGGCTG")
SampleTime <- c( 172, 159, 172, 143, 95, 109, 98, 112, 93, 109, "NA", 165, 143, "NA", 165, 143, 95, 105, 98, 108, 93, 103, "NA", 165, 136, 134, 95, 99, 98, 103, 93, 97)
SampleTime <- paste(SampleTime, "min", sep = "")
# Make data frame
# Entering metrics into a summary table
targets <- data.frame(FileName, SampleNames, CellID, TimePt, TailCount, CellCount, Primer, Barcode, SampleTime, stringsAsFactors = FALSE)
### Fix 'mislabeled' sample
targets$CellID <- gsub("-", ".", targets$CellID)
targets$TimePt <- gsub("-", ".", targets$TimePt)
targets[c(14,25),2:ncol(targets)] <- targets[c(25,14),2:ncol(targets)]
targets$Replicate <- substr(targets$SampleNames, nchar(targets$SampleNames), nchar(targets$SampleNames))
# Rename colnames of counts
colnames(counts) <- paste(targets$CellID, targets$TimePt, targets$Replicate, sep = "_")
# View summary table
datatable(targets)
### Filter out genes with low read counts ("unexpressed" genes) --
unex_filter <- which(rowSums(cpm(counts)) < 40) #take out peaks(in rows) that have sum of less than 20. Sum=peak value across dog samples
library(edgeR)
library(kableExtra)
library(GenomicRanges)
library(ggplot2)
library(knitr)
library(RColorBrewer)
library(VennDiagram)
library(tidyverse)
library(biomaRt)
library(DT)
### Filter out genes with low read counts ("unexpressed" genes) --
unex_filter <- which(rowSums(cpm(counts)) < 40) #take out peaks(in rows) that have sum of less than 20. Sum=peak value across dog samples
counts <- counts[-1 * unex_filter,] #reassign peaks in counts to be * -1
### Filter out genes with high read counts ("blacklist")
ovex_filter <- which(rowSums(cpm(counts)) > 70000)
counts <- counts[-1 * ovex_filter,]
countData <- counts #rewrite countData as sorted by colnames from countData
colnames(countData)
# NOmenclature change from Whole Tail sample to All-tissue sample and Whole tail tissue to uninjured tissue
colnames(countData) <- gsub("_Whole.Tail", "_Uninjured", colnames(countData))
colnames(countData) <- gsub("Whole.Tail", "All-tissue", colnames(countData))
plot(counts$Pax_24hpa_1, counts$Pax_uninjured_3)
# Print a correlation plot so that we can see how the samples correlate
source("myImagePlot.R")
myImagePlot(cor(cpm(countData)),
title = "Mapped Reads") #make a correlation plot of cpm from countData
counts
colnames(countData)
myImagePlot(cor(cpm(countData[,1:2])),
title = "Mapped Reads") #make a correlation plot of cpm from countData
myImagePlot(cor(cpm(countData[,c(2, 8, 10, 13, 19, 21, 24, 30, 32)])),
title = "Mapped Reads") #make a correlation plot of cpm from countData
c(2, 8, 10, 13, 19, 21, 30, 32)
myImagePlot(cor(cpm(countData[,c(2, 8, 10, 13, 19, 21, 30, 32)])),
title = "Mapped Reads") #make a correlation plot of cpm from countData
myImagePlot(cor(cpm(countData[,c(2, 8, 10, 19, 21, 30, 32)])),
title = "Mapped Reads") #make a correlation plot of cpm from countData
# load functions
source("~/Desktop/pax6 paper/Final Markdowns/common_source_functions.R")
# Set colors
my.color.neural <- c("black", "grey", "white", "#2CB11B", "#E9E4A6", "#DFCEE0" , "#E9A17C", "#1BB6AF" , "#172869" , "#FF3200")
condition.color <- c( "#6F0909", "#C0C0C0")
cc_colors <- c((lacroix_palette("Lime"))[c(1,3)], "black")
# Set working directory
setwd("~/Desktop/pax6 paper/Final Markdowns/SingleCell/analysis/")
# Read in pax.neural seurat object
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
Idents(pax.neural) <- pax.neural$phase_condition_cell
# Get number of cells in each cluster for each condition into data frame
nCells.neural <- as.data.frame(table(pax.neural@active.ident))
# Make condition and cluster columns
nCells.neural$cluster <- gsub(nCells.neural$Var1, pattern = ".*__", replacement = "")
nCells.neural$condition <- gsub(nCells.neural$Var1, pattern = "__.*", replacement = "")
nCells.neural$condition <- gsub(nCells.neural$condition, pattern = "_.*", replacement = "")
nCells.neural$phase <- gsub(nCells.neural$Var1, pattern = "__.*", replacement = "")
nCells.neural$phase <- gsub(nCells.neural$phase, pattern = ".*_", replacement = "")
nCells.neural <- nCells.neural[order(nCells.neural$condition),]
# get total numner of cells for each condition
totals <-as.data.frame(nCells.neural %>%
group_by(condition) %>%
summarise(totals = sum(Freq)))
totals$totals <- as.numeric(totals$totals)
nCells.neural <- merge.data.frame(nCells.neural, totals, by = "condition")
nCells.neural$percent <- nCells.neural$Freq/nCells.neural$totals*100
# Make ratio columns in new table expressing percent cluster of all neural cells
nCells.neural$percent <- c((nCells.neural[1:7,2]/totals[1,2])*100, (nCells.neural[8:14,2]/totals[2,2])*100, (nCells.neural[15:21,2]/totals[3,2])*100)
# mutate for sunburts
nCells.neural <- nCells.neural %>% mutate(id = seq(phase))
# factor table
nCells.neural$condition <- factor(nCells.neural$condition, levels = c("uninj", "dmso", "iwr"))
nCells.neural$cluster <- factor(nCells.neural$cluster, levels = c("Spinal Cord Progenitor", "Differentiating Neuron", "Interneurons", "Vulnerable Motor Neuron", "Dopaminergic Neurons", "Motor Neuron (leptin+)", "Motor Neuron"))
nCells.neural$phase <- factor(nCells.neural$phase, levels = c("S", "G2M", "G1"))
datatable(nCells.neural)
nCells.neural %>%
filter(condition == "dmso") %>%
summarize(sum = sum(nCells.neural$percent))
nCells.neural %>%
group_by(condition & phase) %>%
summarize(sum = sum(nCells.neural$percent))
nCells.neural %>%
group_by(condition, phase) %>%
summarize(sum = sum(nCells.neural$percent))
nCells.neural %>%
group_by(condition, phase) %>%
summarize(sum = sum(percent))
# setwd
setwd("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/")
timepoints <- read.table("outs/DA_timepoints.txt", header = TRUE, sep = "\t", row.names = 1) # between timepoints within one condition
datatable(filter(timepoints, timepoints$Gene %in% c("meis1")))
datatable(filter(timepoints, timepoints$Gene %in% c("meis1", "pbx3")))
# read in DA motif tables from GRN prediction
table.6 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.6.txt", sep = "\t")
table.24 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.24.txt", sep = "\t")
table.72 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.72.txt", sep = "\t")
# make master list of tables
mastertable <- rbind(table.24, table.6, table.72)
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx <- filter(mastertable, TF == "pbx3" | Gene =="pbx3")
# filter master table for rows where TF is meis1 and the gene is meis1
Master_meis <- filter(mastertable, TF == "meis1" | Gene =="meis1")
# rowbind to one table
Master_pbx_meis <- rbind(Master_pbx, Master_meis)
# GO
GO_pbx6_terms <- gost(query = pbx3_6_gene,
organism = "hsapiens",
sources = "GO:MF",
evcodes = TRUE,
significant = TRUE)  ##input gene list, run GO
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,1]) # target peaks
pbx3_6_gene <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17]) # target genes
# GO
GO_pbx6_terms <- gost(query = pbx3_6_gene,
organism = "hsapiens",
sources = "GO:MF",
evcodes = TRUE,
significant = TRUE)  ##input gene list, run GO
# GO
GO_pbx6_terms <- gost(query = pbx3_6_gene,
organism = "hsapiens",
sources = "GO:MF",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_pbx6_terms <- GO2table(GO_pbx6_terms)
datatable(GO_pbx6_terms, caption = "pbx3 6hpa go")
meis1_6 <- as.character(filter(Master_meis, timepoint=="6hpa" & TF == "meis1")[,1]) # target peaks
meis1_6_gene <- as.character(filter(Master_meis, timepoint=="6hpa" & TF == "meis1")[,17]) # target genes
# GO
GO_meis6_terms <- gost(query = meis1_6_gene,
organism = "hsapiens",
sources = "GO:MF",
evcodes = TRUE,
significant = TRUE)  ##input gene list, run GO
# GO
GO_meis6_terms <- gost(query = meis1_6_gene,
organism = "hsapiens",
sources = "GO:MF",
evcodes = TRUE,
significant = FLASE)  ##input gene list, run GO
# GO
GO_meis6_terms <- gost(query = meis1_6_gene,
organism = "hsapiens",
sources = "GO:MF",
evcodes = TRUE,
significant = FALSE)  ##input gene list, run GO
# Make GO Table
GO_meis6_terms <- GO2table(GO_meis6_terms)
datatable(GO_meis6_terms, caption = "meis 6hpa go")
log.counts.timepoints <- as.matrix(read.table("outs/log.counts_timepoints.txt", header = TRUE, sep = "\t", row.names = 1)) # log counts for timepoints
# heatmap for meis1 from atac
paxGoGenes <- filter(timepoints, timepoints$Gene %in% c("meis1")) # find all meis1 related peaks in timepoints contrast
rownames(paxGoGenes) <- gsub(paxGoGenes$Peak, pattern = "All", replacement = "ALL")
paxGoGenes <- paxGoGenes[1:nrow(paxGoGenes),]
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
# library(dplyr)
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
# all timepoints
# colnames(mcounts)
mcounts <- mcounts[,c( 10,6,8,7,9 )]
# run heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
cexRow=0.7, cexCol=0.75,key = FALSE
) ##3takes 10 minues
## color palette for heatmaps
color.palette <- colorRampPalette(lacroix_palette("Lemon", n = 50, type = "continuous"))(256)
# run heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
cexRow=0.7, cexCol=0.75,key = FALSE
) ##3takes 10 minues
datatable(filter(timepoints, Gene %in% c("meis1", "pbx3")))
# Get regions
tss_6hpa_1_Peaks <- rownames(timepoints[timepoints$DE.Pax_0hpaVSPax_6hpa == "DOWN",]) # regions 6 > 0
tss_6hpa_2_Peaks <- rownames(timepoints[timepoints$DE.Pax_24hpaVSPax_6hpa == "DOWN",]) # regions 6 > 24
tss_6hpa_Peaks <- unique(c(tss_6hpa_1_Peaks, tss_6hpa_2_Peaks)) # unique peaks
tss_6hpa <- timepoints[tss_6hpa_Peaks,] # make table with only these peaks
datatable(filter(tss_6hpa, Gene == "meis1"))
# Get regions
tss_24hpa_1_Peaks <- rownames(timepoints[timepoints$DE.Pax_24hpaVSPax_6hpa == "UP",]) # 24 > 6
tss_24hpa_2_Peaks <- rownames(timepoints[timepoints$DE.Pax_24hpaVSPax_72hpa == "UP",]) # 24 > 72
tss_24hpa_Peaks <- unique(c(tss_24hpa_1_Peaks, tss_24hpa_2_Peaks))
tss_24hpa <- timepoints[tss_24hpa_Peaks,]
datatable(filter(tss_24hpa, Gene == "meis1"))
datatable(filter(tss_24hpa, Gene == "pbx3"))
# heatmap for meis1 from atac
paxGoGenes <- filter(timepoints, timepoints$Gene %in% c("pbx3")) # find all meis1 related peaks in timepoints contrast
rownames(paxGoGenes) <- gsub(paxGoGenes$Peak, pattern = "All", replacement = "ALL")
paxGoGenes <- paxGoGenes[1:nrow(paxGoGenes),]
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
# library(dplyr)
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
# all timepoints
# colnames(mcounts)
mcounts <- mcounts[,c( 10,6,8,7,9 )]
# run heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = "none",
density.info=c("none"),
col=rev(color.palette),
cexRow=0.7, cexCol=0.75,key = FALSE
) ##3takes 10 minues
# run heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = "none",
density.info=c("none"),
col=rev(color.palette),
cexRow=0.7, cexCol=0.75,key = FALSE,
margins = c(3,3)
) ##3takes 10 minues
# run heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = "none",
density.info=c("none"),
col=rev(color.palette),
cexRow=0.7, cexCol=0.75,key = FALSE,
margins = c(3,10)
) ##3takes 10 minues
# run heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = "none",
density.info=c("none"),
col=rev(color.palette),
cexRow=0.7, cexCol=0.75,key = FALSE, margins = c(10,3)
) ##3takes 10 minues
# heatmap for meis1 from atac
paxGoGenes <- filter(timepoints, timepoints$Gene %in% c("meis1")) # find all meis1 related peaks in timepoints contrast
rownames(paxGoGenes) <- gsub(paxGoGenes$Peak, pattern = "All", replacement = "ALL")
paxGoGenes <- paxGoGenes[1:nrow(paxGoGenes),]
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
# library(dplyr)
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
# all timepoints
# colnames(mcounts)
mcounts <- mcounts[,c( 10,6,8,7,9 )]
# run heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
cexRow=0.7, cexCol=0.75,key = FALSE
) ##3takes 10 minues
# run heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
cexRow=0.7, cexCol=0.75,key = FALSE, margins = c(3,10)
) ##3takes 10 minues
