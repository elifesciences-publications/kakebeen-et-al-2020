pbx_all_gene <- unique(c(pbx3_6_gene, pbx3_24_gene, pbx3_72_gene))
# Make heatmap for pbx3 targets
gene <- concat.grep(pbx3_72)
GOGenes <- grep(gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC", ignore.case = TRUE),] # remove unannotated
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
as.character(paxGoGenes$Gene)
## which go terms are called by these peaks
pbx372_targets <- as.character(paxGoGenes$Gene)
pbx372_targets[1]
grep(Go_72hpa_use$intersection, pbx372_targets[1])
Go_72hpa_use$intersection
grep(Go_72hpa_use$intersection, pattern = pbx372_targets[1])
pbx372_targets[1]
grep(Go_72hpa_use$intersection, pattern = pbx372_targets[1], ignore.case = TRUE)
grep(Go_72hpa_use$intersection, pattern = "slc10a6", ignore.case = TRUE)
pbx372_targets
grep(Go_72hpa_use$intersection, pattern = "sass6", ignore.case = TRUE)
grep(Go_72hpa_use$intersection, pattern = "pmm1", ignore.case = TRUE)
Go_72hpa_use$intersection
datatable(Go_72hpa_use)
input_72hpa
datatable(input_72hpa)
pbx3_72_gene <- as.character(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3")[,17]) # target genes
pbx3_72_gene
grep(Go_72hpa_use$intersection, pattern = "nav2", ignore.case = TRUE)
grep(Go_72hpa_use$intersection, pattern = "rbm20", ignore.case = TRUE)
grep(Go_72hpa_use$intersection, pattern = "slc10", ignore.case = TRUE)
dataTable(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,17])
datatable(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,17])
datatable(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3"))
datatable(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3"))
table.72
datatable(table())
datatable(table.72
)
pbx372_targets
# make master list of tables
mastertable <- rbind(table.24, table.6, table.72)
# read in DA motif tables from GRN prediction
table.6 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.6.txt", sep = "\t")
table.24 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.24.txt", sep = "\t")
table.72 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.72.txt", sep = "\t")
# make master list of tables
mastertable <- rbind(table.24, table.6, table.72)
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx <- filter(mastertable, TF == "pbx3" | Gene =="pbx3")
# filter master table for rows where TF is meis1 and the gene is meis1
Master_meis <- filter(mastertable, TF == "meis1" | Gene =="meis1")
# rowbind to one table
Master_pbx_meis <- rbind(Master_pbx, Master_meis)
# view table
datatable(Master_pbx_meis)
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,1]) # target peaks
pbx3_6_gene <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17]) # target genes
pbx3_6
pbx3_6_gene
# input tss
tss_6hpa_1_Peaks <- rownames(timepoints[timepoints$DE.Pax_0hpaVSPax_6hpa == "DOWN",])
tss_6hpa_2_Peaks <- rownames(timepoints[timepoints$DE.Pax_24hpaVSPax_6hpa == "DOWN",])
tss_6hpa_Peaks <- unique(c(tss_6hpa_1_Peaks, tss_6hpa_2_Peaks))
tss_6hpa <- timepoints[tss_6hpa_Peaks,]
GO_6hpa <- as.data.frame(tss_6hpa$Gene)
input_6hpa <- tss_6hpa[,c(23, 26, 86)]
intersect(pbx3_6_gene, input_6hpa)
intersect(pbx3_6_gene, input_6hpa$Gene)
pbx3_6_gene
intersect(pbx3_6_gene, table.6$Gene)
# read in DA motif tables from GRN prediction
table.6 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.6.txt", sep = "\t")
table.24 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.24.txt", sep = "\t")
table.72 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.72.txt", sep = "\t")
# make master list of tables
mastertable <- rbind(table.24, table.6, table.72)
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx <- filter(mastertable, TF == "pbx3" & TF == "meis1")
# view table
datatable(Master_pbx_meis)
# Identify genes that pbx3 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa pbx3 targets")
Master_pbx
mastertable
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx_meis <- filter(mastertable, TF == "pbx3" & TF == "meis1")
# Identify genes that pbx3 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa pbx3 targets")
Master_pbx_meis
# read in DA motif tables from GRN prediction
table.6 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.6.txt", sep = "\t")
table.24 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.24.txt", sep = "\t")
table.72 <- read.table("~/Desktop/pax6 paper/Final Markdowns/GRN/outs/table.72.txt", sep = "\t")
# make master list of tables
mastertable <- rbind(table.24, table.6, table.72)
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx_meis <- filter(mastertable, TF == "pbx3" & TF == "meis1")
Master_pbx_meis
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx_meis <- filter(mastertable, TF == "pbx3" | TF == "meis1")
Master_pbx_meis
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,1]) # target peaks
pbx3_6_gene <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17]) # target genes
# 24hpa
treegraph(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "24hpa pbx3 targets")
# filter master table for rows where TF is pbx3 and the gene is pbx3
# filter master table for rows where TF is pbx3 and the gene is pbx3
Master_pbx <- filter(mastertable, TF == "pbx3")
# filter master table for rows where TF is meis1 and the gene is meis1
Master_meis <- filter(mastertable, TF == "meis1")
# Identify genes that pbx3 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa pbx3 targets")
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,1]) # target peaks
pbx3_6_gene <- as.character(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3")[,17]) # target genes
pbx3_6_gene
# 24hpa
treegraph(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "24hpa pbx3 targets")
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,1]) # target peaks
pbx3_24_gene <- as.character(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3")[,17]) # target genes
pbx3_24_gene
pbx3_24_gene <- as.character(filter(Master_pbx, timepoint=="24hpa")[,17]) # target genes
pbx3_24_gene
Master_pbx$TF
# Identify genes that pbx3 targets at each timepoint
# 6hpa
treegraph(filter(Master_pbx, timepoint=="6hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa pbx3 targets")
pbx3_6 <- as.character(filter(Master_pbx, timepoint=="6hpa")[,1]) # target peaks
pbx3_6_gene <- as.character(filter(Master_pbx, timepoint=="6hpa")[,17]) # target genes
# 24hpa
treegraph(filter(Master_pbx, timepoint=="24hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "24hpa pbx3 targets")
pbx3_24 <- as.character(filter(Master_pbx, timepoint=="24hpa")[,1]) # target peaks
pbx3_24_gene <- as.character(filter(Master_pbx, timepoint=="24hpa")[,17]) # target genes
# 72hpa
treegraph(filter(Master_pbx, timepoint=="72hpa" & TF == "pbx3"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "72hpa pbx3 targets")
pbx3_72 <- as.character(filter(Master_pbx, timepoint=="72hpa")[,1]) # target peaks
pbx3_72_gene <- as.character(filter(Master_pbx, timepoint=="72hpa")[,17]) # target genes
pbx_all <- unique(c(pbx3_6, pbx3_24, pbx3_72))
pbx_all_gene <- unique(c(pbx3_6_gene, pbx3_24_gene, pbx3_72_gene))
# Make heatmap for pbx3 targets
gene <- concat.grep(pbx3_72)
GOGenes <- grep(gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC", ignore.case = TRUE),] # remove unannotated
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
#colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
pbx3_72
GOGenes <- grep(pattern = gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
GOGenes
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC", ignore.case = TRUE),] # remove unannotated
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
#colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
## which go terms are called by these peaks
pbx372_targets <- as.character(paxGoGenes$Gene)
grep(Go_72hpa_use$intersection, pattern = "slc10", ignore.case = TRUE)
grep(Go_72hpa_use$intersection, pattern = "pmm", ignore.case = TRUE)
grep(Go_72hpa_use$intersection, pattern = "nav", ignore.case = TRUE)
grep(Go_72hpa_use$intersection, pattern = "abat", ignore.case = TRUE)
# Inputs
tss_72hpa_1_Peaks <- rownames(timepoints[timepoints$DE.Pax_24hpaVSPax_72hpa == "DOWN",])
tss_72hpa_2_Peaks <- rownames(timepoints[timepoints$DE.Pax_72hpaVSPax_Whole.Tail == "UP",])
tss_72hpa_Peaks <- unique(c(tss_72hpa_1_Peaks, tss_72hpa_2_Peaks))
tss_72hpa <- timepoints[tss_72hpa_Peaks,]
GO_72hpa <- as.data.frame(tss_72hpa$Gene)
tss_72hpa
intersect(tss_72hpa$Peak, pbx3_72)
pbx3_72
intersect(tss_72hpa$Peak, pbx3_72)
tss_72hpa$Peak
pbx3_72
intersect(tss_72hpa$Peak, pbx3_72)
test <- unique(concat.GO(Go_72hpa_use$intersection))
test
length(test)
length(unique(tss_72hpa$Gene))
intersect(test,tss_72hpa$Gene )
grep(Go_72hpa_use$intersection, pattern = "ptprc", ignore.case = TRUE)
grep(Go_72hpa_use$intersection, pattern = "ptprc", ignore.case = TRUE, value = TRUE)
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "ptprc", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "slc10a", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "lrrc", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "abat", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "rbm20", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "sass6", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "traip", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "nav2", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "tmcc", ignore.case = TRUE), 3]
Go_72hpa_use[grep(Go_72hpa_use$intersection, pattern = "dynlt", ignore.case = TRUE), 3]
# Identify genes that meis1 targets at each timepoint
# 6hpa
treegraph(filter(Master_meis, timepoint=="6hpa" & TF == "meis1"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "6hpa meis1 targets")
meis1_6 <- as.character(filter(Master_meis, timepoint=="6hpa")[,1]) # target peaks
meis1_6_gene <- as.character(filter(Master_meis, timepoint=="6hpa")[,17]) # target genes
# 24hpa
treegraph(filter(Master_meis, timepoint=="24hpa" & TF == "meis1"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "24hpa meis1 targets")
meis1_24 <- as.character(filter(Master_meis, timepoint=="24hpa")[,1]) # target peaks
meis1_24_gene <- as.character(filter(Master_meis, timepoint=="24hpa")[,17]) # target genes
# 72hpa
treegraph(filter(Master_meis, timepoint=="72hpa" & TF == "meis1"), index = c("TF", "Gene"), directed = TRUE, show.labels = TRUE, rootlabel = "72hpa meis1 targets")
meis1_72 <- as.character(filter(Master_meis, timepoint=="72hpa")[,1]) #target peaks
meis1_72_gene <- as.character(filter(Master_meis, timepoint=="72hpa")[,17]) # target genes
Go_24hpa_use[grep(Go_24hpa_use, pattern = "fgfbp1"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "ddx"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "sdccag"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "mpc"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "ska1"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "dnaj"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "pig"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "itpr3"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "map3k"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "runx1"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "il1rap"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "unc5"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "utp"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "usp"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "grid"), 3]
Go_24hpa_use[grep(Go_24hpa_use, pattern = "rxfp3"), 3]
meis1_72_gene
test <- unique(meis1_72_gene)
test
FindGene(pax.neural, test)
# load packages
library(Seurat)
# Read in pax.all seurat object
pax.all <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.combined_FINAL.RDS")
# read in pax.neural
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
FindGene(pax.neural, test)
test <- concat.grep(unique(meis1_72_gene))
FindGene(pax.neural, test)
try <- FindGene(pax.neural, test)
DotPlot(pax.all, features = try, cols = c("blue", "gold"))
DefaultAssay(pax.all) <- "RNA"
DotPlot(pax.all, features = try, cols = c("blue", "gold"))
DotPlot(pax.all, features = try, cols = c("blue", "gold")) + RotatedAxis()
DoHeatmap(pax.all, features = try)
DoHeatmap(pax.all, features = try, assay = "integrated")
DoHeatmap(pax.neural, features = try)
DotPlot(pax.neural, features = try, cols = c("blue", "gold"))
DotPlot(pax.neural, features = try, cols = c("blue", "gold")) + RotatedAxis()
Idents(pax.all) <- "CellClass"
DefaultAssay(pax.all) <- "RNA"
DotPlot(pax.all, features = try, cols = c("blue", "gold")) + RotatedAxis()
meis1_24_gene
DotPlot(pax.all, features = unique(meis1_24_gene), cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features = unique(meis1_24_gene)[1:20], cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.all, features = unique(meis1_24_gene)[1:20], cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.all, features = unique(meis1_24_gene)[1:40], cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features = unique(meis1_24_gene)[1:40], cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features = unique(pbx3_72_gene)[1:40], cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features = unique(pbx3_72_gene), cols = c("blue", "gold")) + RotatedAxis()
unique(pbx3_72_gene)
DotPlot(pax.neural, features = "pmm1", cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features = c("pmm1", "s;c10a6", "ptprc", "abat", "lrrc27-like", "rbm20", "sass6", "pde1a", "traip", "nav2", "dynlt3", "tmcc3"), cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features = c("pmm1", "slc10a6", "ptprc", "abat", "lrrc27-like", "rbm20", "sass6", "pde1a", "traip", "nav2", "dynlt3", "tmcc3"), cols = c("blue", "gold")) + RotatedAxis()
pbx372targets <- c("pmm1", "slc10a6", "ptprc", "abat", "lrrc27-like", "rbm20", "sass6", "pde1a", "traip", "nav2", "dynlt3", "tmcc3")
DotPlot(pax.neural, features =pbx372targets , cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.all, features =pbx372targets , cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features =pbx372targets , cols = c("blue", "gold")) + RotatedAxis()
meis1_24_gene
meis1_24
meis_all <- unique(c(meis1_6, meis1_24, meis1_72)) # target peaks
# Make heatmap for pbx3 targets
gene <- concat.grep(meis1_24)
gene
GOGenes <- grep(gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC|-like", ignore.case = TRUE),] # remove unannotated
paxGoGenes <- paxGoGenes[1:20,]
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
# colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
rownames(mcounts)
DotPlot(pax.all, features =rownames(mcounts) , cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features =rownames(mcounts) , cols = c("blue", "gold")) + RotatedAxis()
# Make heatmap for pbx3 targets
gene <- concat.grep(pbx3_72)
GOGenes <- grep(pattern = gene, timepoints$Peak, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- timepoints[GOGenes, ]
paxGoGenes <- paxGoGenes[-grep(paxGoGenes$Gene, pattern = "Xetrov|LOC", ignore.case = TRUE),] # remove unannotated
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
#colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
## single cell intersection
library(Seurat)
# Read in pax.all seurat object
pax.all <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.combined_FINAL.RDS")
# read in pax.neural
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
Idents(pax.all) <- "CellClass"
# single cell dotplots to show which cells express these targets
DotPlot(pax.all, features =rownames(mcounts) , cols = c("blue", "gold")) + RotatedAxis()
# Read in pax.all seurat object
pax.all <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.combined_FINAL.RDS")
DefaultAssay(pax.all) <- "RNA"
Idents(pax.all) <- "CellClass"
# single cell dotplots to show which cells express these targets
DotPlot(pax.all, features =rownames(mcounts) , cols = c("blue", "gold")) + RotatedAxis()
# single cell dotplots to show which cells express these targets
DotPlot(pax.all, features =unique(rownames(mcounts)) , cols = c("blue", "gold")) + RotatedAxis()
DotPlot(pax.neural, features =unique(rownames(mcounts)) , cols = c("blue", "gold")) + RotatedAxis()
FeaturePlot(pax.neural, "acta1")
FeaturePlot(pax.neural, "acta2")
FeaturePlot(pax.neural, "cent2")
FeaturePlot(pax.neural, "cetn2")
FeaturePlot(pax.neural, "dnali1")
FeaturePlot(pax.neural, "dnah12")
FeaturePlot(pax.neural, "tmem107")
FeaturePlot(pax.neural, "ccdc108")
FindGene(pax.neural, "dnah")
FeaturePlot(pax.neural, "dnah6")
FeaturePlot(pax.neural, "dnah12")
FeaturePlot(pax.neural, "dnah1")
FeaturePlot(pax.neural, "dnah10")
## Heatmap of neuron development
# define genes
# combine treemap and go table
revi_heatmap_72 <- merge.data.frame(Go_72hpa_use, revi_tree_72hpa, by.x = "term_id", by.y = "term_ID" )
gene <- concat.GO(filter(revi_heatmap_72, term_name == "neural precursor cell proliferation")[,4])
gene <- concat.grep(gene)
GOGenes <- grep(gene, tss_72hpa$Gene, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- tss_72hpa[GOGenes, ]
revi_tree_72hpa <- read.csv("outs_figures/REVIGO_treemap_72hpa_091319.csv", header = 1)
treegraph(dtf = revi_tree_72hpa,
index = c("representative", "description"), show.labels = TRUE)
treegraph(dtf = revi_tree_72hpa,
index = c("representative", "description"),
show.labels = FALSE,
vertex.size = 10,
rootlabel = "72hpa")
## Heatmap of neuron development
# define genes
# combine treemap and go table
revi_heatmap_72 <- merge.data.frame(Go_72hpa_use, revi_tree_72hpa, by.x = "term_id", by.y = "term_ID" )
gene <- concat.GO(filter(revi_heatmap_72, term_name == "neural precursor cell proliferation")[,4])
gene <- concat.grep(gene)
GOGenes <- grep(gene, tss_72hpa$Gene, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- tss_72hpa[GOGenes, ]
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
# colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
DotPlot(pax.neural, features = unique(rownames(mcounts)))
DotPlot(pax.neural, features = unique(rownames(mcounts)), cols = c("blue", "gold")) + RotatedAxis()
## Heatmap of neuron development
# define genes
# combine treemap and go table
revi_heatmap_24 <- merge.data.frame(Go_24hpa_use, revi_tree_24hpa, by.x = "term_id", by.y = "term_ID" )
gene <- concat.GO(filter(revi_heatmap_24, term_name == "neuron development")[,4])
gene <- concat.grep(gene)
GOGenes <- grep(gene, tss_24hpa$Gene, ignore.case = T) # get gene name rows from table
# Create heatmap matrix from counts data and input genes
paxGoGenes <- tss_24hpa[GOGenes[1:20], ]
paxGoGenes.cpm <- log.counts.timepoints[rownames(paxGoGenes),]
rownames(paxGoGenes.cpm) <- paxGoGenes$Gene
paxGoGenes.cpm <- data.matrix(paxGoGenes.cpm)
paxGoGenes.cpm <- t(scale(t(paxGoGenes.cpm), scale = T))
colnames(paxGoGenes.cpm) <- gsub("_[0-9]$", "", colnames(paxGoGenes.cpm))
colnames(paxGoGenes.cpm) <- gsub("_2.1$", "", colnames(paxGoGenes.cpm))
mcounts <- t(apply(paxGoGenes.cpm, 1, function(x) {
tapply(x, factor(colnames(paxGoGenes.cpm)), mean)
}))
# colnames(mcounts) # view colnames to pick columns and order for heatmap
mcounts <- (mcounts[,c(6, 8, 7, 9 , 10)])
# Plot heatmap
heatmap.2((mcounts),
scale="none",
trace="none",
Colv = FALSE,
Rowv = TRUE,
dendrogram = 'none',
density.info=c("none"),
col=rev(color.palette),
key = FALSE,
cexRow=2,
cexCol=1,
labCol = FALSE, margins = c(0,10))
DotPlot(pax.neural, features = unique(rownames(mcounts)), cols = c("blue", "gold")) + RotatedAxis()
# Define input regions
GO_all <- filter(paxVall_agg, paxVall_agg$DE.p.PaxVSWholeALL == "DOWN") # filter table for all regions with accessiblity pax < all
GO_all <- GO_all[,c(12, 3)] # get genes and flags
# view table
datatable(GO_all, caption = "regions more accessible in all than pax")
# Run gprofileR2
GO_out <- gost(query = as.character(GO_all$Gene),
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE)  ##input gene list, run GO
# Make table of GO terms (Funciton in common source functions)
GO_ALL_use <- GO2table(GOResults = GO_out)
# setwd
setwd("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/")
# write out table
write.table(GO_ALL_use, "~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/outs_figures/GO_ALL_use.txt", sep = "\t")
