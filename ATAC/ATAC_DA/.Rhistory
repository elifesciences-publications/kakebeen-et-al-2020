cnetplot(bp)
cnetplot(bp, categorySize="pvalue")
cnetplot(bp, categorySize="pvalue", circular=TRUE)
cnetplot(bp, categorySize="pvalue", circular=TRUE, layout = 4)
cnetplot(bp, categorySize="pvalue", circular=TRUE, layout = 6)
emapplot(bp)
## Make input to TSS Table
# tss_24hpa_1_Peaks <- rownames(data[data$DE.Pax_24hpaVSPax_6hpa == "UP",])
tss_24hpa_2_Peaks <- rownames(data[data$DE.Pax_24hpaVSPax_72hpa == "UP",])
tss_24hpa_Peaks <- unique(c(tss_24hpa_2_Peaks))
tss_24hpa <- data[tss_24hpa_Peaks,]
GO_24hpa <- as.data.frame(tss_24hpa$Gene)
#GO#
GO_24hpa_terms <- gost(query = as.character(GO_24hpa$`tss_24hpa$Gene`),
organism = "hsapiens",
sources = "GO:BP",
evcodes = TRUE)  ##input gene list, run GO
## make condensed table for use
GO_24hpa_terms <- GO_24hpa_terms$result
#colnames(all_GOterms)
GO_24hpa_use <- GO_24hpa_terms[,c(3, 9, 11, 16)]
GO_24hpa_use$logp <- -1*log10(GO_24hpa_use$p_value)
GO_24hpa_use <- GO_24hpa_use[order(-GO_24hpa_use$logp),]
TermLevels <- (GO_24hpa_use[, 3])
GO_24hpa_use$term_name <- factor(GO_24hpa_use$term_name, levels = c(TermLevels))
test <- simplifyGOterms(goterms = GO_24hpa_use$term_id, ontology = "BP", go2allEGs = org.Hs.egGO2ALLEGS, maxOverlap = 0.1, )
GO_24hpa_use
test <- simplifyGOterms(goterms = GO_24hpa_use$term_id, ontology = "BP", go2allEGs = org.Hs.egGO2ALLEGS, maxOverlap = 0.1, )
test <- simplifyGOterms(goterms = GO_24hpa_use$term_id, ontology = "BP", go2allEGs = org.Hs.egGO2ALLEGS, maxOverlap = 0.1)
length(test)
test1 <- GO_24hpa_use
a <- concat.grep(test)
b <- grep(test1$term_id, pattern = a, ignore.case = TRUE, )
test1 <- test1[b,]
nrow(test1)
datatable(test1)
?gprofiler
update.packages(gprofiler())
update.packages(gprofiler)
install.packages("gprofiler")
update.packages(gProfileR)
update.packages("gProfileR")
# Read in time.neural seurat object
time.neural <- readRDS("/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/all_neural_061019_1cluster.RDS")
FeaturePlot(time.neural, features = c("pbx3", "meis1", "etv1"))
FeaturePlot(time.neural, features = c("pbx3", "meis1", "etv1", "runx1"))
FeaturePlot(time.neural, features = c("pbx3", "meis1", "etv1", "runx2"))
FeaturePlot(time.neural, features = c("pbx3", "meis1", "etv1", "runx2"), blend = "condition")
FeaturePlot(time.neural, features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "condition")
FeaturePlot(subset(time.neural, condition %in% c("uninj", "dmso")) , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "condition")
VlnPlot(subset(time.neural, condition %in% c("uninj", "dmso")) , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "condition")
Idents(time.neural) <- "condition"
time.neural <- RenameIdents(time.neural,
'uninj'="uninj",
'dmso' = "24hpa",
'iwr'="24hpa")
time.neural$mock_24 <- Idents(time.neural)
Idents(time.neural)
FeaturePlot(subset(time.neural, condition %in% c("uninj", "dmso")) , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "condition")
saveRDS(time.neural, "/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/all_neural_061019_1cluster.RDS")
VlnPlot(subset(time.neural, condition %in% c("uninj", "dmso")) , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "condition")
Idents(time.neural)
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "condition")
Idents(time.neural) <- "three_state"
Idents(time.neural)
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24")
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", assay = "integrated")
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", assay = "RNA")
Idents(time.neural) <- "AK_Names"
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", assay = "RNA")
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", assay = "RNA", log = TRUE)
FeaturePlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", assay = "integrated")
FeaturePlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", order = TRUE)
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", assay = "RNA", ncol = 1)
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", assay = "RNA", ncol = 2)
VlnPlot(time.neural , features = c("pbx3", "meis1", "etv1", "runx2"), split.by = "mock_24", assay = "RNA")
VlnPlot(time.neural , features = c("meis1"), split.by = "mock_24", assay = "RNA")
VlnPlot(time.neural , features = c("pbx3"), split.by = "mock_24", assay = "RNA")
RidgePlot(time.neural , features = c("pbx3"), split.by = "mock_24", assay = "RNA")
RidgePlot(time.neural , features = c("pbx3")assay = "RNA")
RidgePlot(time.neural , features = c("pbx3"),assay = "RNA")
RidgePlot(time.neural , features = c("pbx3"),assay = "integrated")
RidgePlot(time.neural , features = c("meis1"),assay = "RNA")
VlnPlot(time.neural , features = c("etv1"), split.by = "mock_24", assay = "RNA")
time.neural.plotting$AK_Names <- factor(time.neural.plotting$AK_Names, levels = c("NSC", "Transition", "Neural.A","Neural.B", "Neural.C", "Neural.D", "Prdm14" ))
time.neural.plotting$condition <- factor(time.neural.plotting$condition, levels = c("uninj", "dmso", "iwr"))
time.neural.plotting$three_state <- factor(time.neural.plotting$three_state, levels = c("NSC", "Differentiating", "Neuron"))
# read in plotting data
time.neural.plotting<- read.table("~/Desktop/R_working/single_cell/analysis/analysis_fin/pdata_070119.txt", sep = "\t")
time.neural.plotting$AK_Names <- factor(time.neural.plotting$AK_Names, levels = c("NSC", "Transition", "Neural.A","Neural.B", "Neural.C", "Neural.D", "Prdm14" ))
time.neural.plotting$condition <- factor(time.neural.plotting$condition, levels = c("uninj", "dmso", "iwr"))
time.neural.plotting$three_state <- factor(time.neural.plotting$three_state, levels = c("NSC", "Differentiating", "Neuron"))
# plot umap
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none")
# color by condition
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=condition))+
geom_point(stat="identity") + scale_color_manual(values = c("green", "blue", "orange")) + Seurat:::NoAxes() + theme(legend.position = "none")
# color by condition
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=condition))+
geom_point(stat="identity") + scale_color_manual(values = c("green", "blue", "orange")) + Seurat:::NoAxes() + theme(legend.position = "none")
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none")
# define umap colors
my.color <- c(lacroix_palette("PeachPear", type = "discrete"), lacroix_palette("Lime", type = "discrete"),  lacroix_palette("MurePepino", type = "discrete"))
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none")
# -----------------------------------------------------------------------------
# If you don't have the treemap package installed, uncomment the following line:
# install.packages( "treemap" );
library(treemap) 								# treemap package by Martijn Tennekes
library(kableExtra)
library(knitr)
library(gridExtra)
library(dplyr)
library(gProfileR)
library(ggplot2)
library(AnnotationDbi)
library(biomaRt)
library(gplots)
library(tidyverse)
library(RColorBrewer)
library(DT)
library(LaCroixColoR)
library(Seurat)
library(VennDiagram)
library(cowplot)
library(imager)
library(magick)
library(pdftools)
# source functions
source("~/Desktop/R_working/common_source_functions.R")
# define umap colors
my.color <- c(lacroix_palette("PeachPear", type = "discrete"), lacroix_palette("Lime", type = "discrete"),  lacroix_palette("MurePepino", type = "discrete"))
# Read in time.neural seurat object
time.neural <- readRDS("/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/all_neural_061019_1cluster.RDS")
# read in plotting data
time.neural.plotting<- read.table("~/Desktop/R_working/single_cell/analysis/analysis_fin/pdata_070119.txt", sep = "\t")
time.neural.plotting$AK_Names <- factor(time.neural.plotting$AK_Names, levels = c("NSC", "Transition", "Neural.A","Neural.B", "Neural.C", "Neural.D", "Prdm14" ))
time.neural.plotting$condition <- factor(time.neural.plotting$condition, levels = c("uninj", "dmso", "iwr"))
time.neural.plotting$three_state <- factor(time.neural.plotting$three_state, levels = c("NSC", "Differentiating", "Neuron"))
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none")
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none") + theme_bw()
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none") + theme_minimal()
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none")
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none", panel.grid = FALSE)
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none", plot.background = "white")
# plot umap
# all conditions
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes()
# color by condition
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=condition))+
geom_point(stat="identity") + scale_color_manual(values = c("green", "blue", "orange")) + Seurat:::NoAxes() + theme(legend.position = "none")
## Metadata and umap coordiinates
umapdata <- as.data.frame(Embeddings(object = time.neural[["umap"]])) #get umap coordinates
colnames(umapdata)
meta <- time.neural[[]] # get metadata
time.neural.plotting <- cbind(umapdata, meta) #make table
datatable(time.neural.plotting)
colnames(time.neural.plotting)
select.cells <- c("CGATGTAAGAGATGAG_1", "CTGGTCTAGCGTTGCC_2", "AGGGAGTCATCACGAT_3", "CATGGCGCACTGTCGG_3", "CCCAATCGTGGTTTCA_3", "GGCTGGTAGTGTGAAT_3",
"TAAACCGCAGTTCATG_3", "TTCTACACAGGGATTG_3", "ACATACGGTTCATGGT_3")
remove <- select.cells
remove <- concat.grep(remove)
time.neural.plotting <- time.neural.plotting[-1*(grep(rownames(time.neural.plotting), pattern = remove, ignore.case = TRUE)),]
write.table(time.neural.plotting, "/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/time.neural.plotting_061719.txt", sep = "\t",row.names = TRUE, col.names = TRUE)
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=mock_24))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes()
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=condition))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes()
# color by condition
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=mock_24))+
geom_point(stat="identity") + scale_color_manual(values = c("green", "blue", "orange")) + Seurat:::NoAxes() + theme(legend.position = "none")
geom_point(stat="identity") + scale_color_manual(values = c(blue", "orange")) + Seurat:::NoAxes() + theme(legend.position = "none")
# color by condition
ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=mock_24))+
geom_point(stat="identity") + scale_color_manual(values = c("blue", "orange")) + Seurat:::NoAxes() + theme(legend.position = "none")
# DE wnt
wnt.t <- read.table("/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/DE_tables/Wnt/wnt.marker.all_051219.txt", sep = "\t", header = TRUE)
wnt.t.2 <- read.table("/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/DE_tables/Wnt/wnt.marker.all.2_051219.txt", sep = "\t", header = TRUE)
# OVerall DE
wnt.overall <- read.table("/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/DE_tables/Wnt/wnt.comb.marker.all.1_051219.txt", sep = "\t", header = TRUE)
nrow(wnt.t)
nrow(wnt.t.2)
nrow(wnt.overall)
Idents(time.neural) <- "condition"
# Load Packages
library(Seurat)
library(ggplot2)
library(LaCroixColoR)
library(RColorBrewer)
library(cowplot)
library(DT)
library(dplyr)
library(gridExtra)
library(AnnotationDbi)
library(gProfileR)
library(monocle)
library(reticulate)
library(VGAM)
library(gplots)
# Read in time.neural seurat object
time.neural <- readRDS("/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/all_neural_061019_1cluster.RDS")
Idents(time.neural) <- "condition"
DotPlot(subset(time.neural, condition %in% c("dmso", "iwr")), features = wnt.overall$gene)
wnt.overall$gene
DotPlot(subset(time.neural, condition %in% c("dmso", "iwr")), features = as.character(wnt.overall$gene), cols = c("blue", "orange")) + coord_flip() +RotatedAxis()
as.character(wnt.overall$gene)
DotPlot(subset(time.neural, condition %in% c("dmso", "iwr")), features = "rps29", cols = c("blue", "orange")) + coord_flip() +RotatedAxis()
DotPlot(time.neural, "rps29")
DotPlot(time.neural, features = "rps29")
FeaturePlot(time.neural, features = "rps29")
FeaturePlot(time.neural, features = "rps29")
FeaturePlot(time.neural, features = "rps29")
# -----------------------------------------------------------------------------
# If you don't have the treemap package installed, uncomment the following line:
# install.packages( "treemap" );
library(treemap) 								# treemap package by Martijn Tennekes
library(kableExtra)
library(knitr)
library(gridExtra)
library(dplyr)
library(gProfileR)
library(ggplot2)
library(AnnotationDbi)
library(biomaRt)
library(gplots)
library(tidyverse)
library(RColorBrewer)
library(DT)
library(LaCroixColoR)
library(Seurat)
library(VennDiagram)
library(cowplot)
library(imager)
library(magick)
library(pdftools)
DotPlot(subset(time.neural, condition %in% c("dmso", "iwr")), features = "rps29", cols = c("blue", "orange")) + coord_flip() +RotatedAxis()
# -----------------------------------------------------------------------------
# If you don't have the treemap package installed, uncomment the following line:
# install.packages( "treemap" );
library(treemap) 								# treemap package by Martijn Tennekes
library(kableExtra)
library(knitr)
library(gridExtra)
library(dplyr)
library(gProfileR)
library(ggplot2)
library(AnnotationDbi)
library(biomaRt)
library(gplots)
library(tidyverse)
library(RColorBrewer)
library(DT)
library(LaCroixColoR)
library(Seurat)
library(VennDiagram)
library(cowplot)
library(imager)
library(magick)
library(pdftools)
# source functions
source("~/Desktop/R_working/common_source_functions.R")
# define umap colors
my.color <- c(lacroix_palette("PeachPear", type = "discrete"), lacroix_palette("Lime", type = "discrete"),  lacroix_palette("MurePepino", type = "discrete"))
# Read in time.neural seurat object
time.neural <- readRDS("/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/all_neural_061019_1cluster.RDS")
# read in plotting data
time.neural.plotting<- read.table("/Users/annekekakebeen/Desktop/R_working/single_cell/analysis/analysis_fin/time.neural.plotting_061719.txt", sep = "\t")
time.neural.plotting$AK_Names <- factor(time.neural.plotting$AK_Names, levels = c("NSC", "Transition", "Neural.A","Neural.B", "Neural.C", "Neural.D", "Prdm14" ))
time.neural.plotting$condition <- factor(time.neural.plotting$condition, levels = c("uninj", "dmso", "iwr"))
time.neural.plotting$three_state <- factor(time.neural.plotting$three_state, levels = c("NSC", "Differentiating", "Neuron"))
# plot umap
# all conditions
p1 <- ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none")
p2 <- ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=time.neural.plotting$Laevis))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "none")
p2
# plot umap
# all conditions
p1 <- ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "bottom")
plot_grid(p1, p2, nrow = 1)
time.neural.plotting$Laevis
levels(time.neural.plotting$Laevis)
time.neural.plotting$Laevis <- factor(time.neural.plotting$Laevis, levels = c("Spinal Cord Progenitor", "Differentiating Neuron" , "Interneurons",  "Motor Neuron" , "Vulnerable Motor Neuron", "Motor Neuron (leptin+)" , "Dopaminergic Neurons" ))
# plot umap
# all conditions
p1 <- ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=AK_Names))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "bottom")
p2 <- ggplot(time.neural.plotting, aes(x=UMAP_1, y=UMAP_2, color=time.neural.plotting$Laevis))+
geom_point(stat="identity") + scale_color_manual(values = my.color) + Seurat:::NoAxes() + theme(legend.position = "bottom")
plot_grid(p1, p2, nrow = 1)
# boxplot to compare measurement data across cntrl and pbx3 MO in clutch 2
ggplot(data = filter(MOdata, Sample %in% c("cntrl", "pbx3MO")), aes(x= Sample, y=Measurement, fill= Sample)) + # read in data, define x and y axis
geom_boxplot() + # defines plot type
scale_fill_manual(values = c("#C0C0C0", "purple")) + # changes color of box
theme(legend.position = "none") + # change legend position
facet_grid(Timepoint~MeasureType) + # make facets by measurement type and timepoint
theme_bw() +
# stat_compare_means(label = "p.format", method = "anova", label.x = "pbx3MO")
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "cntrl", label.y = 600) # add significant asteriscs
g2m.genes <- cc.genes$g2m.genes
# define cell cycle genes (Seurat)
s.genes <- cc.genes$s.genes # get cell cycle genes
# Read in pax.neural seurat object
pax.neural <- readRDS("~/Desktop/pax6 paper/Final Markdowns/SingleCell/UMAP/pax.neural_FINAL.RDS")
# define cell cycle genes (Seurat)
s.genes <- cc.genes$s.genes # get cell cycle genes
s.genes
g2m.genes <- cc.genes$g2m.genes
g2m.genes
DotPlot(pax.neural, features = s.genes)
# Laod functions
source("~/Desktop/pax6 paper/Final Markdowns/common_source_functions.R")
g2m.genes <- cc.genes$g2m.genes
# define cell cycle genes (Seurat)
s.genes <- cc.genes$s.genes # get cell cycle genes
s.genes.grep <- concat.grep(s.genes) # put object with gene names into greppable form
g2m.genes.grep <- concat.grep(g2m.genes)
# grep for genes in Seurat Object
s.genes <- FindGene(pax.combined, s.genes.grep) # grep for genes
s.genes <- intersect(s.genes, tolower(cc.genes$s.genes)) # intersect with original gene list to eliminate any genes that come up with same beginning pattern and different end
# grep for genes in Seurat Object
s.genes <- FindGene(pax.neural, s.genes.grep) # grep for genes
s.genes <- intersect(s.genes, tolower(cc.genes$s.genes)) # intersect with original gene list to eliminate any genes that come up with same beginning pattern and different end
g2m.genes <- FindGene(pax.neural, g2m.genes.grep)
g2m.genes <- intersect(g2m.genes, tolower(cc.genes$g2m.genes))
DotPlot(pax.neural, features = s.genes)
DotPlot(pax.neural, features = g2m.genes)
# define cell cycle genes (Seurat)
s.genes <- cc.genes$s.genes # get cell cycle genes
g2m.genes <- cc.genes$g2m.genes
s.genes
g2m.genes
Idents(pax.neural) <- pax.neural$phase_condition_cell
# Get number of cells in each cluster for each condition into data frame
nCells.neural <- as.data.frame(table(pax.neural@active.ident))
# Make condition and cluster columns
nCells.neural$cluster <- gsub(nCells.neural$Var1, pattern = ".*__", replacement = "")
nCells.neural$condition <- gsub(nCells.neural$Var1, pattern = "__.*", replacement = "")
nCells.neural$condition <- gsub(nCells.neural$condition, pattern = "_.*", replacement = "")
nCells.neural$phase <- gsub(nCells.neural$Var1, pattern = "__.*", replacement = "")
nCells.neural$phase <- gsub(nCells.neural$phase, pattern = ".*_", replacement = "")
nCells.neural <- nCells.neural[order(nCells.neural$condition),]
# get total numner of cells for each condition
totals <-as.data.frame(nCells.neural %>%
group_by(condition) %>%
summarise(totals = sum(Freq)))
totals$totals <- as.numeric(totals$totals)
nCells.neural <- merge.data.frame(nCells.neural, totals, by = "condition")
nCells.neural$percent <- nCells.neural$Freq/nCells.neural$totals*100
# Make ratio columns in new table expressing percent cluster of all neural cells
nCells.neural$percent <- c((nCells.neural[1:7,2]/totals[1,2])*100, (nCells.neural[8:14,2]/totals[2,2])*100, (nCells.neural[15:21,2]/totals[3,2])*100)
# mutate for sunburts
nCells.neural <- nCells.neural %>% mutate(id = seq(phase))
# factor table
nCells.neural$condition <- factor(nCells.neural$condition, levels = c("uninj", "dmso", "iwr"))
nCells.neural$cluster <- factor(nCells.neural$cluster, levels = c("Spinal Cord Progenitor", "Differentiating Neuron", "Interneurons", "Vulnerable Motor Neuron", "Dopaminergic Neurons", "Motor Neuron (leptin+)", "Motor Neuron"))
nCells.neural$phase <- factor(nCells.neural$phase, levels = c("S", "G2M", "G1"))
# Filter table for unjured
plot.table <- filter(nCells.neural, condition %in% c("uninj", "dmso"))
nCells.neural
# Filter table for unjured
plot.table <- filter(nCells.neural, condition %in% c("uninj", "dmso"))
# Filter table for unjured
plot.table <- filter(nCells.neural, nCells.neural$condition %in% c("uninj", "dmso"))
plot.table
# Filter table for unjured
plot.table <- filter(nCells.neural, condition %in% c("uninj", "dmso"))
nCells.neural
Idents(pax.neural) <- pax.neural$phase_condition_cell
# Get number of cells in each cluster for each condition into data frame
nCells.neural <- as.data.frame(table(pax.neural@active.ident))
# Make condition and cluster columns
nCells.neural$cluster <- gsub(nCells.neural$Var1, pattern = ".*__", replacement = "")
nCells.neural$condition <- gsub(nCells.neural$Var1, pattern = "__.*", replacement = "")
nCells.neural$condition <- gsub(nCells.neural$condition, pattern = "_.*", replacement = "")
nCells.neural$phase <- gsub(nCells.neural$Var1, pattern = "__.*", replacement = "")
nCells.neural$phase <- gsub(nCells.neural$phase, pattern = ".*_", replacement = "")
nCells.neural <- nCells.neural[order(nCells.neural$condition),]
# get total numner of cells for each condition
totals <-as.data.frame(nCells.neural %>%
group_by(condition) %>%
summarise(totals = sum(Freq)))
totals$totals <- as.numeric(totals$totals)
# load packages
library(Seurat)
library(LaCroixColoR)
library(ggplot2)
library(cowplot)
library(tidyr)
library(DT)
library(dplyr)
library(ggpubr)
library(rmarkdown)
Idents(pax.neural) <- pax.neural$phase_condition_cell
# Get number of cells in each cluster for each condition into data frame
nCells.neural <- as.data.frame(table(pax.neural@active.ident))
# Make condition and cluster columns
nCells.neural$cluster <- gsub(nCells.neural$Var1, pattern = ".*__", replacement = "")
nCells.neural$condition <- gsub(nCells.neural$Var1, pattern = "__.*", replacement = "")
nCells.neural$condition <- gsub(nCells.neural$condition, pattern = "_.*", replacement = "")
nCells.neural$phase <- gsub(nCells.neural$Var1, pattern = "__.*", replacement = "")
nCells.neural$phase <- gsub(nCells.neural$phase, pattern = ".*_", replacement = "")
nCells.neural <- nCells.neural[order(nCells.neural$condition),]
# get total numner of cells for each condition
totals <-as.data.frame(nCells.neural %>%
group_by(condition) %>%
summarise(totals = sum(Freq)))
totals$totals <- as.numeric(totals$totals)
nCells.neural <- merge.data.frame(nCells.neural, totals, by = "condition")
nCells.neural$percent <- nCells.neural$Freq/nCells.neural$totals*100
# Make ratio columns in new table expressing percent cluster of all neural cells
nCells.neural$percent <- c((nCells.neural[1:7,2]/totals[1,2])*100, (nCells.neural[8:14,2]/totals[2,2])*100, (nCells.neural[15:21,2]/totals[3,2])*100)
# mutate for sunburts
nCells.neural <- nCells.neural %>% mutate(id = seq(phase))
# factor table
nCells.neural$condition <- factor(nCells.neural$condition, levels = c("uninj", "dmso", "iwr"))
nCells.neural$cluster <- factor(nCells.neural$cluster, levels = c("Spinal Cord Progenitor", "Differentiating Neuron", "Interneurons", "Vulnerable Motor Neuron", "Dopaminergic Neurons", "Motor Neuron (leptin+)", "Motor Neuron"))
nCells.neural$phase <- factor(nCells.neural$phase, levels = c("S", "G2M", "G1"))
# Filter table for unjured
plot.table <- filter(nCells.neural, condition %in% c("uninj", "dmso"))
plot.table
plot.table %>% group_by(condition, phase) %>% summarise(sum = sum(percent))
plot.table %>% group_by(condition, phase) %>% summarise(sum = sum(percent))
# Load packages
library(knitr)
library(gridExtra)
library(dplyr)
library(gprofiler2)
library(ggplot2)
library(AnnotationDbi)
library(biomaRt)
library(gplots)
library(tidyverse)
library(RColorBrewer)
library(DT)
library(LaCroixColoR)
library(Seurat)
library(VennDiagram)
library(cowplot)
library(imager)
library(magick)
library(pdftools)
library(limma)
library(treemap)
# source functions
source("~/Desktop/R_working/common_source_functions.R")
## color palette for heatmaps
color.palette <- colorRampPalette(lacroix_palette("Lemon", n = 50, type = "continuous"))(256)
# setwd
setwd("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_DA/")
gr.files <- readRDS("~/Desktop/pax6 paper/Final Markdowns/ATAC/ATAC_QC_Counts/peaksgr.RDS")
pax <- as.data.frame(gr.files[[1]])
all <- as.data.frame(gr.files[[15]])
library(GenomicRanges)
plot_hist <- rbind(pax, all)
ggplot(pax, aes(x=DistanceToTSS, fill=name)) +
geom_histogram() +
facet_grid(rows = "name") +
scale_fill_manual(values = c("forestgreen","dodgerblue3")) +
theme_bw() +
xlim(-5000, 5000)
ggplot(plot_hist, aes(x=DistanceToTSS, fill=name)) +
geom_histogram() +
facet_grid(rows = "name") +
scale_fill_manual(values = c("forestgreen","dodgerblue3")) +
theme_bw() +
xlim(-5000, 5000)
install.packages("cycleRtools")
library(cycleRtools)
intervaldata <- read_ride("/Volumes/GARMIN/GARMIN/ACTIVITY/767G5131.FIT")
intervaldata <- read_ride("/Volumes/GARMIN/GARMIN/ACTIVITY/767G5131.fit")
install.packages("fitdc")
library(fitdc)
test <- read_fit('/Volumes/GARMIN/GARMIN/ACTIVITY/767G5131.FIT')
class(test)
test
test[[1]]
test <- system.file("/Volumes/GARMIN/GARMIN/ACTIVITY/767G5131.FIT", package = "fitdc")
data <- read_fit(test)
test
data
test <- read_fit('/Volumes/GARMIN/GARMIN/ACTIVITY/767G5131.FIT')
test1 <- fitdc::unpack(test)
unpack
?unpack
